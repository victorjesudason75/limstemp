====== Subroutine SCHED_HL7_IN_MSG_READ Starts here ===
declare routineName
routineName = "SCHED_HL7_IN_MSG_READ"
' ====================================================================================
' Abstract: Schedular routine for reading the HL7 incoming HL7 file , process and send acknowledgment
'        
'
' Inputs:
'   Context:
'        
'   Variables (inc global):
'        
' Outputs:
'   Context:
'        
'   Variables:
'        
'
' Change History:
' Date						By							Reason
' 01-Nov-2022		ARUN TYAGI		 Initial_version
' 23-Feb-2024		ARUN TYAGI		 Updated query to include facility table
' 10-Oct-2024		Akash Raj			  Updated query to include sending application also for consider an order to be duplicate
' 25-Feb-2025		Akash Raj			  Added code to update HL7 string into the table using direct SQL since the funciton is not inserting/updating more than 1000000 characters long string
' 27-Jun-2025		 Akash Raj		       Renamed the variable index to indexAckOut to avoid deadlock happend on variable value for "index"
' ====================================================================================

'Changed by Arun on Feb 23, 2024
HL7FilesQry = "select HL7facilityDetails.HL7_IN_FILE_PATH, HL7facilityDetails.HL7_PROCESSED_FILE_PATH, HL7facilityDetails.HL7_ERROR_FILE_PATH, HL7facilityDetails.HL7_MSG_TEMP_IN from HL7_FACILITY_DETAILS  HL7facilityDetails "
HL7FilesQry = HL7FilesQry & " join FACILITY facility on facility.Z_HL7_FACILITY_DETAILS = HL7facilityDetails.ENTRY_NAME where  HL7facilityDetails.ACTIVE = 'T' and facility.Z_HL7 = 'T'"
HL7FilesQry = ContextTranslate(HL7FilesQry) 
status = SQL(HL7FilesQry, "HL7FacilityArray", , "F")
totalFacility = UBound(HL7FacilityArray, 1) 

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Initialize Variables for error logging 
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Declare createTrace errorCategory displayError
createTrace = true
displayError = true
errorCategory = "HL7_IN"

FOR facilityIndex = 1 TO totalFacility 
	
	inputDirectory = HL7FacilityArray[facilityIndex,1]
	processedDirectory = HL7FacilityArray[facilityIndex,2]
	errorDirectory = HL7FacilityArray[facilityIndex,3]
	HL7Template = HL7FacilityArray[facilityIndex,4]	

	tableHL7 = "T_HL7_MESSAGE_IN"
	keyFieldsHL7[1] = "ENTRY_CODE"

	fieldsHL7[1] = "MSG_CATEGORY"
	fieldsHL7[2] = "STATUS"
	fieldsHL7[3] = "HL7_STRING"

	valuesHL7[1] = HL7Template
	valuesHL7[2] = "N"
	
	status = DirFiles(inputDirectory,"*" , "FilesArrayName", ) 
	totalDirFiles = UBound(FilesArrayName, 1)

	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	'Loop through each new files and push/update the data in T_HL7_MESSAGE_IN table
	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------

	FOR fileIndex = 1 TO totalDirFiles

		orderNumber = ""
		sampleNumber = ""
		sendingApplication = ""
		fileName = Str(UnicodeToAscii(fileName))
		fileName = inputDirectory & FilesArrayName[fileIndex,1]
		HL7String = FileContents(fileName, "T", ) 
		valuesHL7[3] = HL7String
		dateTimeHL7Out = HL7FormatDate(DateTime() ,) 

		'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'Check For order Number to insert/update the message
		'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
		handle = HL7Parse(HL7String) 
		orderNumber = HL7FieldFromSegment(handle, "ORC", 1, "Placer Order Number", "Entity Identifier", , 1)
		sendingApplication = HL7FieldFromSegment(handle, "MSH", 1, "Sending Application", "Namespace ID", , 1) 
		status = HL7DiscardMessage(handle) 

		IF (IsEmpty(orderNumber) OR IsNull(orderNumber)  OR IsEmpty(sendingApplication ) OR IsNull(sendingApplication ) ) THEN	
			errorLogMsg = NLS("T_ErrorOrderNumberHL7MessageIn", "*Order Number OR Sending Application not Found") 
			logNumber = CreateLIMSLog(errorLogMsg, "T_HL7_MESSAGE_IN", , errorCategory, , , , createTrace)
			newFileName  = StringReplace(errorDirectory & Left(FilesArrayName[fileIndex,1] ,Instr(FilesArrayName[fileIndex,1] ,".") -   1), Chr(32) , "_",) & ".txt"
			IF (FileExists(newFileName) ) THEN 
				status = FileKill(newFileName ,) 
			ENDIF 
			status = FileRename(fileName,newFileName) 
		ELSE 		
			' 			qryHL7Check = "select  ENTRY_CODE, SAMPLE_NUMBER  from T_HL7_MESSAGE_IN where EXTERNAL_KEY = '{orderNumber}'" 'Previous query comented by Akash on 10Oct2024
			qryHL7Check = "select  ENTRY_CODE, SAMPLE_NUMBER  from T_HL7_MESSAGE_IN where EXTERNAL_KEY = '{orderNumber}' and SENDING_APPLICATION  = '{sendingApplication}' " 'Updated the condition to also check Sending Appilication - by Akash on 10Oct2024
			qryHL7Check = ContextTranslateSQL(qryHL7Check) 
			status = SQL(qryHL7Check, "arrayHL7Message", , , , , , , ) 
			numOfRecord = UBound(arrayHL7Message, 1) 

			IF (numOfRecord < 1) THEN 			
				fieldsHL7[4] = "RECEIVED_ON"
				valuesHL7[4] = DateTime() 
				HL7EntryCode = GetTableIncrement("TABLE", "T_HL7_MESSAGE_IN")
				keyValuesHL7[1] = HL7EntryCode
				auditReason = NLS("T_NewAuditReasonHL7MessageIn","SCHED_HL7_IN_MSG_READ  initial  (New Messages)")

				status = InsertTable(tableHL7,keyFieldsHL7,keyValuesHL7,fieldsHL7,valuesHL7,auditReason,"T","T")
				IF (NOT(status)) THEN
					errorLogMsg = NLS("T_NewInsertFailedHL7MessageIn ", "*Insert T_HL7_MESSAGE_IN table failed")
					logNumber = CreateLIMSLog(errorLogMsg, "T_HL7_MESSAGE_IN", orderNumber, errorCategory, , , , createTrace)
				ELSE 
					'Added code to update HL7 string into the table using direct SQL since the funciton is not inserting/updating more than 1000000 characters long string - by Akash on 25Feb2025
					updateHl7String = StringReplace(HL7String, "'", "''", ) 
					updateHl7StringQuery = ContextTranslate("CALL update_hl7_message_in_hl7string({HL7EntryCode}, '{updateHl7String}')") 
					status = SQL(updateHl7StringQuery) 
					IF (NOT(status)) THEN
						errorLogMsg = NLS("T_NewUpdateFailedHL7MessageIn", "*Update T_HL7_MESSAGE_IN table (HL7_SRTING) failed")
						logNumber = CreateLIMSLog(errorLogMsg, "T_HL7_MESSAGE_IN", HL7EntryCode , errorCategory, , , , createTrace)
					ENDIF 'End Update hl7 string
				ENDIF				
			ELSE 
				keyValuesHL7[1] = arrayHL7Message[1,1]
				HL7EntryCode = arrayHL7Message[1,1]
				sampleNumber = arrayHL7Message[1,2]
				auditReason = NLS("T_UpdateAuditReasonHL7MessageIn","SCHED_HL7_IN_MSG_READ  initial (Updated Messages)")

				IF (IsEmpty(sampleNumber) OR IsNull(sampleNumber) OR (sampleNumber = 0)) THEN 			
					status = UpdateTableFlds(tableHL7,keyFieldsHL7,keyValuesHL7,fieldsHL7,valuesHL7,auditReason,, "T", "T") 
					IF (NOT(status)) THEN
						errorLogMsg = NLS("T_NewUpdateFailedHL7MessageIn", "*Update T_HL7_MESSAGE_IN table failed")
						logNumber = CreateLIMSLog(errorLogMsg, "T_HL7_MESSAGE_IN", HL7EntryCode , errorCategory, , , , createTrace)
					ELSE 
						'Added code to update HL7 string into the table using direct SQL since the funciton is not inserting/updating more than 1000000 characters long string - by Akash on 25Feb2025
						updateHl7String = StringReplace(HL7String, "'", "''", ) 
						updateHl7StringQuery = ContextTranslate("CALL update_hl7_message_in_hl7string({HL7EntryCode}, '{updateHl7String}')") 
						status = SQL(updateHl7StringQuery) 
						IF (NOT(status)) THEN
							errorLogMsg = NLS("T_NewUpdateFailedHL7MessageIn", "*Update T_HL7_MESSAGE_IN table (HL7_SRTING) failed")
							logNumber = CreateLIMSLog(errorLogMsg, "T_HL7_MESSAGE_IN", HL7EntryCode , errorCategory, , , , createTrace)
						ENDIF 'End Update hl7 string
					ENDIF		
				ELSE 
					errorLogMsg = NLS("T_DuplicateOrderHL7MessageIn", "Duplicate Order Sample# {sampleNumber} already logged")
					errorLogMsg = ContextTranslate(errorLogMsg) 
					logNumber = CreateLIMSLog(errorLogMsg, "T_HL7_MESSAGE_IN", HL7EntryCode , errorCategory, , , , createTrace)				
				ENDIF
			ENDIF 
			newFileName  = processedDirectory &  dateTimeHL7Out   & "-" & orderNumber  & "-" & sendingApplication & ".txt" 'Updated the name also with Sending appilication name - by Akash on 14Oct2024
			newFileName = Str(UnicodeToAscii(newFileName)) 
			status = FileRename(fileName,newFileName) 
		ENDIF	
		status = Save() 'Added by AKash on 14Oct2024
	NEXT 
NEXT

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Get messages to process
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
moreMessagesToProcess = true

WHILE (moreMessagesToProcess)

	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	'Checking T_HL7_MESSAGE_IN table for new entries (status 'N')
	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	query = "select  ENTRY_CODE, MSG_CATEGORY, HL7_STRING  from T_HL7_MESSAGE_IN "
	query = query + " where STATUS = 'N'  "
	query = query + " order by ENTRY_CODE "

	status = SQL(query, "messagesArray", , "F")

	numMessages = UBound(messagesArray, 1)

	IF (numMessages < maxMessagesLoop) THEN
		moreMessagesToProcess = false
	ENDIF

	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	'Process new messages
	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	FOR iMessage = 1 to numMessages
		HL7MessageEntryCode = messagesArray[iMessage, 1]     
		HL7Template = messagesArray[iMessage, 2]
		HL7String = messagesArray[iMessage, 3]  

		GOSUB HL7_IN_INITIAL

	NEXT

WEND     'moreMessagesTo Process = true

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Generate the Acknowledgment messages for received orders
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
qryHL7In = "select  ENTRY_CODE, STATUS from T_HL7_MESSAGE_IN where STATUS in ('P','E')"
status = SQL(qryHL7In, "arrayHL7InRecord", , , , , , , ) 
numRecord = UBound(arrayHL7InRecord, 1) 

FOR indexAckOut = 1 TO numRecord 'Renamed the variable index to indexAckOut to avoid deadlock happend on variable value for "index" - by Akash on 27Jun2025
	HL7EntryCode = ""
	orderNumber = ""
	HL7InInitialStatus = ""
	HL7MessageEntryCode = arrayHL7InRecord[indexAckOut,1]	
	HL7InInitialStatus = arrayHL7InRecord[indexAckOut,2]
	GOSUB HL7_CREATE_MESSAGE
NEXT
RETURN
====== Subroutine SCHED_HL7_IN_MSG_READ Ends here ===
====== Subroutine HL7_CREATE_MESSAGE Starts here ===
declare routineName
routineName = "HL7_CREATE_MESSAGE"
' ====================================================================================
' Abstract: Subroutine for generating the HL7 out message  from T_HL7_MESSAGE_IN table
'        
'
' Inputs:  HL7MessageEntryCode sampleNumber
'   Context:
'        
'   Variables (inc global):
'        
' Outputs:
'   Context:
'        
'   Variables:
'        
'
' Change History:
' Date						By							Reason
' 01-Nov-2022		ARUN TYAGI		 Initial_version
' 23-Feb-2024		ARUN TYAGI		 Updated query to include facility table 
' 06-Apr-2024		ARUN TYAGI		 LIMS-DEF-01157 - Removing comments from the results
' =====================================================================================

dob = ""
now = DateTime() 
orderControlCode = ""
orderStatusCode = ""
orderNumber = ""
sendingfacility = ""
messageString = ""
currentStatus = ""
HL7MsgCreateObjectID = ""
C2NPatientID = ""
gender = ""
sampleNoteString = ""
sampleConditionString = ""
finalMessageString = ""
createHL7OutputFile = ""
messageType = "OML^O21"
sampleConditionCode = ""
testConditionString = ""
resultConditionString =  ""
medicalRecord = ""
OBRSpecimenSource = ""
OBXSubID = ""

dateTimeHL7Out = HL7FormatDate(DateTime() , ) 
status = SelectRecord("T_HL7_MESSAGE_IN",HL7MessageEntryCode,,, ) 	

orderNumber = SELECT T_HL7_MESSAGE_IN.EXTERNAL_KEY
currentStatus = SELECT T_HL7_MESSAGE_IN.STATUS
C2NPatientID = SELECT T_HL7_MESSAGE_IN.X_PATIENT_ID
HL7SendingApplication = SELECT  T_HL7_MESSAGE_IN.SENDING_APPLICATION
IF (IsEmpty(observationDateTime) OR IsNull(observationDateTime) OR observationDateTime = "observationdatetime") THEN 
	ObservationDateTime = SELECT T_HL7_MESSAGE_IN.X_SAMPLED_ON
ENDIF

IF (IsEmpty(HL7InInitialStatus) OR IsNull(HL7InInitialStatus) OR observationDateTime = "hl7inintialstatus") THEN 
	HL7InInitialStatus = SELECT T_HL7_MESSAGE_IN.STATUS
ENDIF	 

IF (IsEmpty(OBRresultStatus) OR IsNull(OBRresultStatus)  OR OBRresultStatus = "obrresultstatus") THEN 
	OBRresultStatus = "S"
ENDIF

'Changed by Arun on Feb 23, 2024
HL7msgTypeQry = "select HL7FacilityDetails.HL7_MESSAGE_CATEGORY, HL7FacilityDetails.HL7_OUT_FILE_PATH, HL7FacilityDetails.REQUIRED_HL7_OUTPUT, facility.Z_HL7_CUST_PRACT_CODE   from HL7_FACILITY_DETAILS HL7FacilityDetails"
HL7msgTypeQry = HL7msgTypeQry & " join FACILITY facility on facility.Z_HL7_FACILITY_DETAILS = HL7FacilityDetails.ENTRY_NAME where facility.Z_SENDING_APPLICATION = '{HL7SendingApplication}'"
HL7msgTypeQry = ContextTranslate(HL7msgTypeQry) 
status = SQL(HL7msgTypeQry, "HL7MessageTypeArray",  , "T", )
HL7messageType = HL7MessageTypeArray[1,1]
filePath = HL7MessageTypeArray[1,2]
createHL7OutputFile = HL7MessageTypeArray[1,3]
HL7CustPractCode = HL7MessageTypeArray[1,4]

SELECTCASE currentStatus
CASE "P"
	HL7Messagestatus = "Q"
	messageString = NLS("T_OrderReceivedHL7MessageOut","Order Received Successfully")
	orderControlCode = "OK"
	orderStatusCode = "IP"
CASE "E"
	IF (IsEmpty(orderNumber) OR IsNull(orderNumber) ) THEN 
		HL7Messagestatus = "R"
	ELSE 
		HL7Messagestatus = "W"
	ENDIF
	messageString = SELECT T_HL7_MESSAGE_IN.ERROR_MSG
	orderControlCode = "OH"
	orderStatusCode = "HD"
CASE "Q"
	HL7Messagestatus = "I"
	messageString = NLS("T_SampleLoggedHL7MessageOut"," Testing in Progress")
	orderControlCode = "OK"
	orderStatusCode = "SC"
CASE ELSE	
	'Get all the notes from sample test and result
	sampleNoteQry = "select n.NOTE_CONTENTS from SAMPLE s  join LIMS_HTML_NOTES n ON s.T_REPORT_COMMENTS = n.NOTE_ID   where s.SAMPLE_NUMBER = {sampleNumber}"
	testNoteQry = "select NOTE_CONTENTS from LIMS_HTML_NOTES where NOTE_ID in (select  t.T_REPORT_COMMENTS from  TEST t  where t.SAMPLE_NUMBER = {sampleNumber} and t.T_REPORT_COMMENTS IS NOT NULL and t.PARENT_TEST = 0)"
	
	'Changed by Arun on Apr 06, 2024 to exclude comments from results
	' 	resultNoteQry = "select NOTE_CONTENTS from LIMS_HTML_NOTES where NOTE_ID in (select  r.T_REPORT_COMMENTS from  RESULT r  where r.SAMPLE_NUMBER = {sampleNumber} and r.T_REPORT_COMMENTS IS NOT NULL)"
	' 	resultNoteQry = ContextTranslate(resultNoteQry) 
	
	sampleNoteQry = ContextTranslate(sampleNoteQry) 
	testNoteQry = ContextTranslate(testNoteQry) 
	status = SQL(sampleNoteQry, "arraySampleNote", , , , , , , )
	sampleNoteCount = UBound(arraySampleNote, 1) 
	
	IF (sampleNoteCount > 0) THEN 
		lineBreak = "<br>"
		finalMessageString = arraySampleNote[1,1]
		messageString = messageString & finalMessageString
		'Perform the formatting to keep > or < symbols in the message string and perform the conversion to text message
		messageString = StringReplace(messageString, "<br>", "{lineBreak}", )
		messageString = StringReplace(messageString, ">", "{ gt }", )
		messageString = StringReplace(messageString, "<", "{ lt }", )
		messageString = ContextTranslate(messageString) 
		messageString = ConvertHtmlToText(messageString)
		messageString = StringReplace(messageString, "{ gt }", ">", )
		messageString = StringReplace(messageString, "{ lt }", "<", )
		messageString = StringReplace(messageString , Chr(10)," ", "T")
		messageString = Trim(messageString)
	ENDIF 

	'Extract all the notes from test and get the corresponding html template name
	status = SQL(testNoteQry , "arrayTestNote", , , , , , , )
	totalTestNotes = UBound(arrayTestNote, 1) 
	
	IF (totalTestNotes > 0) THEN 
		status = ClearArray("arrayInputNote") 
		arrayInputNote = arrayTestNote
		status = Subroutine("FN_COMPARE_HL7_NOTES") 
		totalTestCondition = UBound(arrInputConditionString, 1)
		IF (totalTestCondition > 0) THEN 
			testConditionString = ArrayToCSVString(arrInputConditionString, "; ") 
		ENDIF
	ENDIF
	
	'Changed by Arun on APr 06, 2024 to remove comments from result
	' 	'Extract all the notes from result and get the corresponding html template name
	' 	status = SQL(resultNoteQry  , "arrayResultNote", , , , , , , )
	' 	totalResultNotes= UBound(arrayResultNote, 1) 
	' 	IF (totalResultNotes > 0) THEN 
	' 		status = ClearArray("arrayInputNote") 
	' 		arrayInputNote = arrayResultNote
	' 		status = Subroutine("FN_COMPARE_HL7_NOTES") 
	' 		totalResultCondition = UBound(arrInputConditionString, 1)
	' 		IF (totalResultCondition > 0) THEN 
	' 			resultConditionString = ArrayToCSVString(arrInputConditionString, "; ") 
	' 		ENDIF
	' 	ENDIF
	
	'Get all the html text from the sample condition
	status = ClearArray("arrayAllConditionCode") 
	status = ArrayFromCSVString(sampleCondition, , ",", "T", "arrayAllConditionCode") 
	status = ArrayConvertToSingleDim(arrayAllConditionCode, "arrayAllConditionCode", 1) 
	sampleCondition = StringReplace(sampleCondition , ",", "','", ) 
	sampleCondition = StringReplace(sampleCondition , " ", "", ) 
	samplecommentQry = "select HTML_TEMPLATE, NAME from HTML_TEMPLATE where NAME in ('{sampleCondition}')"
	samplecommentQry = ContextTranslate(samplecommentQry) 
	status = SQL(samplecommentQry, "arraySampleCondition", , , , , , , )
	sampleConditionCount = UBound(arraySampleCondition, 1) 

	messageStringTemp = messageString
	messageString = ""
	status = ClearArray("sampleConditionCodeString") 
	'Remove sample conditions  notes from the sample notes
	IF (sampleConditionCount > 0) THEN 
		FOR sampleConditionIndex = 1 TO sampleConditionCount 
			sampleConditionString = arraySampleCondition[sampleConditionIndex,1]
			sampleConditionCodeString[sampleConditionIndex] = arraySampleCondition[sampleConditionIndex,2]
			sampleConditionString = ConvertHtmlToText(sampleConditionString) 
			sampleConditionString = StringReplace(sampleConditionString , Chr(10),Chr(32), "T") 
			sampleConditionString = Trim(sampleConditionString) 
			messageStringTemp = StringReplace(messageStringTemp , sampleConditionString ,"", ) 			
			messageString = messageString & sampleConditionString & Chr(32)
			messageString = Trim(messageString ) 
		NEXT
	ENDIF
	
	'Remove the extra spaces from the message
	status = ClearArray("arrayMessageStringTemp") 
	messageStringTemp = StringReplace(messageStringTemp, Chr(44), "{comma}",) 
	status = ArrayFromCSVString(messageStringTemp, , Chr(32), "T", "arrayMessageStringTemp") 
	messageStringTemp = ""
	messageStringTemp = ArrayToCSVString(arrayMessageStringTemp, Chr(32)) 

	'Combine all the notes together(sample note, test note, result note and sample condition note)
	messageStringTemp = Trim(messageStringTemp)
	IF (messageStringTemp <> "EMPTY") THEN 
		messageString = messageString & Chr(32) & messageStringTemp 
		messageString = StringReplace(messageString, "{comma}", Chr(44), ) 
	ENDIF

	IF (IsEmpty(reflexFinalMessage) OR IsNull(reflexFinalMessage) OR (reflexFinalMessage = "reflexfinalmessage")) THEN 
	ELSE 
		IF (IsEmpty(messageString) OR IsNull(messageString) ) THEN 
			messageString = reflexFinalMessage
		ELSE
			messageString = reflexFinalMessage & Chr(32) & messageString 
		ENDIF
	ENDIF
	
	status = ClearArray("arrayFinalSampleConditionCode") 
	status = ArrayJoin(sampleConditionCodeString, arrayAllConditionCode, "arrayFinalSampleConditionCode", "Row") 
	numDistinct = ArrayDistinctValues(arrayFinalSampleConditionCode, "arrayFinalSampleConditionCode") 
	totalSampleCondition = UBound(arrayFinalSampleConditionCode, 1) 
	sampleCondition = ""
	IF (totalSampleCondition > 0) THEN 
		sampleCondition = ArrayToCSVString(arrayFinalSampleConditionCode, "; ") 
	ENDIF
	
	'Combine all the html template names together (like LIPEMIC, LEAK etc)
	IF (Not(IsEmpty(testConditionString )) OR Not(IsNull(testConditionString) )) THEN 
		sampleCondition = sampleCondition & "; " & testConditionString 
	ENDIF 
	
	'Changed by Arun on Apr 06, 2024 to remove comments from result
	' 	IF (Not(IsEmpty(resultConditionString  )) OR Not(IsNull(resultConditionString) )) THEN 
	' 		sampleCondition = sampleCondition & "; " & resultConditionString 
	' 	ENDIF 
	
	IF (NotEmpty(sampleCondition) OR Not(IsNull(sampleCondition) ) ) THEN 
		sampleConditionCode = StringReplace(sampleCondition, "','", "; ", ) 
	ENDIF
	messageString  = StripChars(messageString , Chr(10) ) 
	messageString  = StripChars(messageString , Chr(13) ) 
	messageString = Trim(messageString) 
	
	IF (sampleStatus = "X") THEN 
		orderControlCode = "OC"
		orderStatusCode = "CA"
		HL7Messagestatus = "C"
		IF (HL7messageType = "IE_HL7_CLIA_OUTBOUND") THEN 
			OBRSpecimenSource = "Plasma"
		ENDIF
	ELSEIF (sampleStatus = "A") THEN 
		IF (HL7messageType = "IE_HL7_CLIA_OUTBOUND") THEN 
			qryResultAPS = "select RESULT_NUMBER from RESULT where SAMPLE_NUMBER = {sampleNumber} and NAME like 'APS%' and ANALYSIS like 'PRECIVITY%' and FORMATTED_ENTRY like '-1%'"
			qryResultAPS = ContextTranslate(qryResultAPS) 
			status = ClearArray("arrayResultAPS") 
			status = SQL(qryResultAPS, "arrayResultAPS", ) 
			APSResultCount = UBound(arrayResultAPS, 1) 
			IF (APSResultCount > 0) THEN 				
				orderStatusCode = "DC"
			ELSE
			orderStatusCode = "CM"
			ENDIF
		ELSE 
			orderStatusCode = "CM"
		ENDIF
		orderControlCode = "OE"
		HL7Messagestatus = "C"
		OBRSpecimenSource = "Plasma"
	ELSEIF (sampleStatus = "P") THEN
		orderControlCode = "OE"
		orderStatusCode = "CM"
		HL7Messagestatus = "I"
		OBRSpecimenSource = "Plasma"
	ENDIF
	messageType = "ORU^R01"	
ENDSELECT 

HL7MsgCreateObjectID = orderNumber
messageControlID = dateTimeHL7Out & "-" & HL7MsgCreateObjectID

qryHL7MsgType = "select OBJECT_CLASS, USE_ESCAPE_SEQ from T_HL7_MESSAGE_TYPE where NAME = '{HL7messageType}'"
qryHL7MsgType = ContextTranslate(qryHL7MsgType) 
status = SQL(qryHL7MsgType, "messageTypeArray",  , "T", )
HL7MessageTypeObjectClass = messageTypeArray[1,1]
HL7UseEscapeSequences = messageTypeArray[1,2]

IF (HL7MessageTypeObjectClass = "SAMPLE") THEN 
	objectClassTableKeyField = "SAMPLE_NUMBER"
ENDIF


'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Query the Message Type table for the message sections
'Loop through each of the sections of the HL7 Message and run the subroutine to create the section
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------

query = "select section_name, subroutine, segments_include "
query = query + " from t_hl7_msg_type_sectn "
query = query + " where t_hl7_message_type = '" + HL7messageType + "' "
query = query + " and auto_run = 'T' and subroutine is not null "
query = query + " order by order_number "
status = SQL(query, "messageTypeSectionArray",  , "T", )
numMessageSections = UBound(messageTypeSectionArray, 1)

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Create Message
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF (numMessageSections > 0) THEN
	handle = HL7CreateMessage(HL7UseEscapeSequences)
ENDIF

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Add Message Sections
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
iSection = 0
WHILE (iSection < numMessageSections)
	iSection = iSection + 1
	HL7SectionName = messageTypeSectionArray[iSection, 1]
	HL7Subroutine = messageTypeSectionArray[iSection, 2]
	HL7SegmentsInclude = messageTypeSectionArray[iSection, 3]
	
	IF (Instr(HL7SegmentsInclude ,"PID") > 0 ) THEN 
		IF ((Not(IsEmpty(C2NPatientID))) OR (Not(IsNull(C2NPatientID)))) THEN 
			status = ClearArray("arrayPatientRevision") 
			qryPatientRevision = "select max(REVISION_NO) from PATIENT where NAME = '{C2NPatientID}'"
			qryPatientRevision = ContextTranslate(qryPatientRevision) 
			status = SQL(qryPatientRevision, "arrayPatientRevision", ) 
			C2NPatientRevision = arrayPatientRevision[1,1]
			C2NPatientID = SELECT PATIENT.NAME
						WHERE NAME = C2NPatientID 
						AND REVISION_NO = C2NPatientRevision
						ORDER BY 1
			HL7Subroutine = "HL7_CREATE_HEADERS"
		ENDIF
	ENDIF 

	hasHL7SectionErrors = false
	errorMsgHL7Section = ContextTranslate(NLS("T_CHTErrorHL7SectionName","*Section: {HL7SectionName} : "))
	status = Subroutine(HL7Subroutine,  , "F")

	IF (hasHL7SectionErrors) THEN
		hasMessageErrors = true
		errorLogMsg = errorMsgHL7Section
		logNumber = CreateLIMSLog(errorLogMsg, HL7MessageTypeObjectClass, HL7MsgCreateObjectID, errorCategory, , displayError, , createTrace)
	ENDIF
WEND 

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Retrieve the completed HL7 String
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
HL7String = HL7Contents(handle, HL7UseEscapeSequences)
HL7String = StringReplace(HL7String, "ERROR", "", "T") 

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Purge the message from memory
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
status = HL7DiscardMessage(handle)
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Cleanup
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
status = ClearInterpreterObjects()  
status = ClearArray("tempArray")
status = ClearArray("objectsArray")

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Create HL7 message file and update T_HL7_MESSAGE_IN table
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
finalStatusQry = "select STATUS from T_HL7_MESSAGE_in where ENTRY_CODE = '{HL7MessageEntryCode}'"
finalStatusQry = ContextTranslate(finalStatusQry) 
status = SQL(finalStatusQry, "arrayHL7FinalStatus", , , , , , , ) 
HL7FinalStatus = arrayHL7FinalStatus[1,1]
IF (HL7InInitialStatus = HL7FInalStatus) THEN 

	HL7Intable = "T_HL7_MESSAGE_IN"
	HL7InkeyFields[1] = "ENTRY_CODE"
	HL7InkeyValues[1] = HL7MessageEntryCode 

	indexHL7In = 1
	IF ((currentStatus = "P") OR (currentStatus = "Q") OR (currentStatus = "E")) THEN 
		HL7InFields[indexHL7In] = "X_ACK_MESSAGE"
		HL7ValFields[indexHL7In] = HL7String
		indexHL7In = indexHL7In + 1
	ENDIF
	HL7InFields[indexHL7In] = "STATUS"
	HL7ValFields[indexHL7In] = HL7Messagestatus
	indexHL7In = indexHL7In + 1
	IF (currentStatus = "Q") THEN 
		HL7InFields[indexHL7In] = "QUEUED_ON"
		HL7ValFields[indexHL7In] = now
		indexHL7In = indexHL7In + 1
		HL7InFields[indexHL7In] = "SAMPLE_NUMBER"
		HL7ValFields[indexHL7In] = sampleNumber
		indexHL7In = indexHL7In + 1
	ELSEIF (currentStatus = "I") THEN 
		HL7InFields[indexHL7In] = "COMPLETED_ON"
		HL7ValFields[indexHL7In] = now
		indexHL7In = indexHL7In + 1
	ENDIF 
	'Updating audit history
	auditReasonHL7InTable = ContextTranslate(NLS("T_AckAuditReasonHL7MessageIn","Acknowledgment Message  (Order#  {orderNumber})"))
	status = UpdateTableFlds(HL7Intable,HL7InkeyFields,HL7InkeyValues,HL7InFields,HL7ValFields,auditReasonHL7InTable,, "T", "T") 
	IF (NOT(status)) THEN
		errorLogMsg = NLS("T_NewUpdateFailedHL7MessageIn", "*Update T_HL7_MESSAGE_IN table failed")
		logNumber = CreateLIMSLog(errorLogMsg, "T_HL7_MESSAGE_IN", HL7MessageEntryCode , errorCategory, , , , createTrace)
	ENDIF	
	'Write HL7 message to NAS Drive
	IF (createHL7OutputFile = "T") THEN 
		IF (HL7messageType  = "IE_HL7_CLIA_OUTBOUND") THEN 
			fileName = filepath & Left(HL7CustPractCode,7) & "_" & messageControlID   & "_" &  Left(messageType,3)   & ".txt" 
		ELSE
			fileName = filepath  & messageControlID  & ".txt" 
		ENDIF
		statusFile = FileNew(fileName, ) 
		statusFile = FileWrite(fileName, HL7String , ) 
		statusFile = FileClose(fileName) 
		IF (Not(statusFile ) ) THEN 
			errorLogMsg = NLS("T_ErrorHL7FileCreate", "Unable to process HL7 file")
			logNumber = CreateLIMSLog(errorLogMsg, "T_HL7_MESSAGE_IN", HL7MessageEntryCode , errorCategory, , , , createTrace)	
		ENDIF 
	ENDIF
ENDIF
RETURN
====== Subroutine HL7_CREATE_MESSAGE Ends here ===
====== Subroutine F Starts here ===
// Subroutine not found in database
====== Subroutine F Ends here ===
====== Subroutine HL7_IN_INITIAL Starts here ===
'----       Subroutine:  HL7_IN_INITIAL
'----       Function:  Process a single HL7 Initial message (status N)
'----
'----       INPUTS:
'----            Context: 
'----            HL7MessageEntryCode
'----            HL7Template
'----            HL7String
'----            msgCategoryToProcess - optional - when run in background, i.e. ('PHLIP_ELO', 'PHLIP_ELR') or ('PHLIP_ELO')
'----            Variables (incl global)
'----
'----       OUTPUTS:
'----            Context:
'----                None
'----            Variables (incl global)
'----                 hasHL7InitialErrors
'----                 errorMessage, errorCodesArray
'----                 HL7Template is passed to subroutine HL7_PARSE_MSG
'----
'----    Caveats:
'----                The HL7 message selected will have a Status of "N" and a blank FACILITY_RECV field. After processing   
'----                the STATUS will change to "P" and the FACILITY_RECV field will contain the name of the Receiving Facility.
'----                If the Receiving Facility OID in the HL7 message is invalid, the Status will be changed to "E" and the 
'----                FACILITY_RECV field will remain blank.

'----                Each message is for ONE sample.  Multiple OBR segments = multiple tests / sample
'----                Tube ID must be unique for the sending application
'----
'----    Revisions:
'----
'---- Date                   Author                                    Details
'---- 18-Jun-2008     Susan                                    Initial configuration
'---- 18-Jun-2009     Susan                                    Updating for PHLIP (PanFlu)
'---- 16-Feb-2012    Susan                                     Record Sending Facility OID in Message IN table
'---- 03-Jan-2014    Stan                                 Rewrite of code to provide generic incoming HL7 messages processing
'---- 16-Jun-2014     Susan                                    Broke apart subroutine.  This now does processing of a single message.
'---- 16-Dec-2014    Susan                               Cleanup - clear out all variables for the HL7 Template
'---- 10-Feb-2015    Mike Camacho                             Implement LabWare 7 error logging
'---- 26-Jan-2017    Susan                                        Use Medical Record Num if Patient missing
'---- 18-Apr-2017	 Kathy Brody		 	   NLS of messages in code - format based on NLS Template
'---- 25-Jul-2017    Susan                                  CHT0024 Do not need to initialize vars separately.  Init in Parse Msg,and only set here if template known
'---- 29-Oct-2018	Susan								T0009V04-T2494EK Variable initialization for variables that are not part of the HL7 Template; Check msg structure (moved here from Check Mandatory fields.  Added for ADT.
'---- 18-May-2020    Susan                              T5013SG Clear variable placerSpecimenID
'---- 05-Nov-2022    Arun Tyagi                      Added additional subroutine to be run to populate additional fields in T_HL7_MESSAGE_IN table and initialize the varibale to null
'---- 22-Feb-2024    Arun Tyagi                      Initialize the varibale to null
'---- 29-Jul-2024    	Akash                    		Initialize variables for ICD10 codes and Billing
'---- 04-Sep-2024	 Akash							Added variable name to get customer practitioner salesforceID from HL7 inbound order
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Initialize Variables
'Variables written to HL7 Message In table that are NOT variables on the HL7 Template, must be initialized here
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Declare HL7MsgInKeyFieldArray[] HL7MsgInKeyValueArray[]  

auditReason = NLS("T_CHTAuditHL7InInitialUpdateNewMsg", "*HL7_IN_INITIAL update (New Messages)")

HL7MsgInKeyFieldArray[1] = "ENTRY_CODE"

HL7InFieldIndex = 1
HL7MsgInFieldArray[HL7InFieldIndex] = "FACILITY_RECV"
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "PATIENT_LAST"
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "PATIENT_FIRST"
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "SSN"
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "TUBE_ID"
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "EXTERNAL_ID"
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "SENDING_APP_OID" 
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "SENDING_FAC_OID"
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "ERROR_MSG"
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "ERROR_CODES"
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "SAMPLE_NUMBER"
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "STATUS"

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Initialize Variables that may be written to HL7 Message In table
'Variables that are on the HL7 Template will be automatically cleared.  But these variables may not be on the HL7 Template
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
LIMSSampleNumber = 0
facilityRecvName = ""
lastName = ""
firstName = ""
SSN = ""
patientID = ""
medicalRecordNum = ""
tubeID = ""
placerSpecimenID = ""
orderNumber = "" 'Changed by Arun on Nov 11, 2022
sendingapplicationname = ""
sendingfacilityname = "" 
dob = ""
patientCreateCheck = FALSE
patientIdC2N = "" 
errorMessageHL7  = ""
gender = ""
sampledDate = ""
dbFileName = ""
sampledDateString = ""
'End

'Changed By Arun on Feb 22, 2024
middleName = ""
suffixName = ""
prefixName = ""
patientRace = ""
patientAddress1 = ""
patientAddress2 = ""
patientCity = ""
patientState = ""
patientCountry = ""
patientHomePhone = ""
patientZipPostalCode = ""
patientAccountNumber = ""
patientEthnicGroup = ""
testCode = ""
tubeAccession = ""
insurancePlanID = ""
insuranceCompanyID = ""
insuranceCompanyName = ""
insuranceCompanyAddress1 = ""
insuranceCompanyAddress2= ""
insuranceCompanyCityName= ""
insuranceCompanyStateName = ""
insuranceCompanyZIPCode = ""
insuranceCompanyCountryName = ""
insuranceGroupNumber = ""
insurancePolicyNumber = ""
insuranceType = ""
guarantorLastName = ""
guarantorFirstName = ""
guarantorMiddleName = ""
guarantorSuffixName = ""
guarantorPrefixName = ""
guarantorAddress1 = ""
guarantorAddress2 = ""
guarantorCityName = ""
guarantorStateName = ""
guarantorCountryName = ""
guarantorZIPCode = ""
guarantorContactNumber = ""
guarantorDOB = ""
guarantorGender = ""
guarantorRelationship = ""

PV1FinancialClassCode = ""
DG1SetID = ""
DG1DiagnosisCode = ""
DG1DiagnosisCodeText = ""
DG1DiagnosisCodeSystem = ""

'Added by Akash on 04Sep2024
salesforceClientId = ""
salesforceProviderId = ""
insuranceInsuredGivenName = ""
insuranceInsuredFirstName = ""
insuranceInsuredRelation = ""
insuranceInsuredDob = ""
clientFacilityName = ""
attendingDoctorFirstName = ""
attendingDoctorLastName = ""
attendingDoctorNPI = ""
insurancePhoneNumber = ""
insuranceSetID = "" 'Added by Akash on 04Oct2024
'End

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Initialize Variables for error logging 
'Note: displayError will default to false if omitted from lims log call
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Declare createTrace errorCategory displayError
createTrace = true
displayError = true
errorCategory = "HL7_IN"

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Process the message
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
hasHL7InitialErrors = FALSE
errorMessage = ""
errorCodesIndex = 0
status = ClearArray("errorCodesArray")

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Parse message
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
GoSub HL7_PARSE_MSG

IF (hasHL7MessageErrors) THEN
	hasHL7InitialErrors = TRUE
	errorMessage = errorLogMsg + NLS("T_CHTErrorFailedParsingRoutine", "* - Failed Parsing routine. ")
	errorCodesIndex = errorCodesIndex + 1
	errorCodesArray[errorCodesIndex] = "PARSE_FATL"
ELSE
	GoSub HL7_CHECK_MANDATORY_FIELDS

	IF (messageDirection = "ORDER_IN") THEN
		status = Subroutine("HL7_CHECK_ORDER_STRUCTURE", , "F")
	ELSEIF (messageDirection = "RESULT_IN") THEN
		status = Subroutine("HL7_CHECK_RESULT_STRUCTURE", , "F")
	ELSEIF (messageDirection = "ADT_IN") THEN
		status = Subroutine("HL7_CHECK_ADT_STRUCTURE", , "F")
	ENDIF
ENDIF     'had fatal parse

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Update T_HL7_MESSAGE_IN table with parsed data
'Variables are initialized in HL7_PARSE_MSG, as long as there is an HL7Template
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
HL7MsgInKeyValueArray[1] = HL7MessageEntryCode

status = ArrayInitialize("HL7MsgInValueArray", 12, 1, "")
status = ArrayConvertToSingleDim(HL7MsgInValueArray, "HL7MsgInValueArray", 1)
IF (NOT(IsEmpty(HL7Template))) THEN 
	HL7InValueIndex = 1
	HL7MsgInValueArray[HL7InValueIndex] = facilityRecvName	
	HL7InValueIndex = HL7InValueIndex + 1
	HL7MsgInValueArray[HL7InValueIndex] = lastName
	HL7InValueIndex = HL7InValueIndex + 1
	HL7MsgInValueArray[HL7InValueIndex] = firstName
	HL7InValueIndex = HL7InValueIndex + 1
	HL7MsgInValueArray[HL7InValueIndex] = SSN
	HL7InValueIndex = HL7InValueIndex + 1
	HL7MsgInValueArray[HL7InValueIndex] = ""
	IF (NOT(IsEmpty(tubeID))) THEN
		HL7MsgInValueArray[HL7InValueIndex] = tubeID
	ENDIF			
	HL7InValueIndex = HL7InValueIndex + 1
	HL7MsgInValueArray[HL7InValueIndex] = ""
	IF ((IsEmpty(patientID)) AND (NOT(IsEmpty(medicalRecordNum)))) THEN
		HL7MsgInValueArray[HL7InValueIndex] = medicalRecordNum
	ELSEIF (NOT(IsEmpty(patientID))) THEN			
		HL7MsgInValueArray[HL7InValueIndex] = patientID
		ENDIF 
	ENDIF
HL7InValueIndex = HL7InValueIndex + 1
HL7MsgInValueArray[HL7InValueIndex] = sendingApplicationOID
HL7InValueIndex = HL7InValueIndex + 1
HL7MsgInValueArray[HL7InValueIndex] = sendingFacilityOID

HL7InValueIndex = HL7InValueIndex + 1
'HL7MsgInValueArray[9] = errorMessage
HL7MsgInValueArray[HL7InValueIndex] = errorMessageHL7
numErrors = Ubound(errorCodesArray, 1)
HL7InValueIndex = HL7InValueIndex + 1
IF (numErrors > 0) THEN
	HL7MsgInValueArray[HL7InValueIndex] = ArrayToCSVString(errorCodesArray, ", ")
ELSE
	HL7MsgInValueArray[HL7InValueIndex] = ""
ENDIF
HL7InValueIndex = HL7InValueIndex + 1
HL7MsgInValueArray[HL7InValueIndex] = LIMSSampleNumber

HL7InValueIndex = HL7InValueIndex + 1
IF (hasHL7InitialErrors) THEN
	HL7MsgInValueArray[HL7InValueIndex] = "E"
ELSE
	HL7MsgInValueArray[HL7InValueIndex] = "P"
ENDIF
GOSUB HL7_IN_INITIAL_ADDITIONAL 'Changed By Arun on Nov 05, 2022
lasterror = ""
status = UpdateTableFlds("T_HL7_MESSAGE_IN", HL7MsgInKeyFieldArray, HL7MsgInKeyValueArray, HL7MsgInFieldArray, HL7MsgInValueArray, auditReason, "F", "T")
IF (NOT(status)) THEN
	errorLogMsg = NLS("T_CHTErrorUpdateHL7MessageInFailed", "*Update T_HL7_MESSAGE_IN table failed")
	logNumber = CreateLIMSLog(errorLogMsg, "T_HL7_MESSAGE_IN", HL7MessageEntryCode, errorCategory, , , , createTrace)
ENDIF

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Cleanup
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
status = Subroutine("HL7_TEMPLATE_VARS_CLEAR",  , "F")
status = ClearInterpreterObjects("T_HL7_MESSAGE_IN")

return
====== Subroutine HL7_IN_INITIAL Ends here ===
====== Subroutine HL7_CHECK_ADT_STRUCTURE Starts here ===
'----       Subroutine:   HL7_CHECK_ADT_STRUCTURE
'----       Function:   Checks the incoming HL7 message structure for ADT Message (Patient create, update, merge)
'----
'----       INPUTS:
'----            Context:
'----
'----            Variables (incl global) 
'----                 HL7MessageEntryCode 
'----                 messageTypeTriggerEvent e.g. A01, A04, A08, A18
'----                 patientID
'----				  mergePatientID (only for trigger event A18)
'----                 errorCodesArray,errorCodesIndex 
'----
'----       OUTPUTS:
'----            Context:
'----                None
'----            Variables (incl global)
'----                None 
'----
'----    Caveats:
'----                The match to patient is on Patient External ID = patientID or mergePatientID.  
'----				  This MUST be the same as the patient matching in subroutine HL7_VALIDATE_PATNT_SUB_PRACT
'----
'----    Revisions:
'----
'---- Date                   Author                              Details
'---- 29-Oct-2018   Susan Epstein          T0009V04-T2494EK Initial configuration

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Initialize Variables
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Declare numPatients 
Declare tempArray[] 

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Verify patient(s) for various message types
'patientID matches to PATIENT.T_EXTERNAL_ID
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
SELECTCASE messageTypeTriggerEvent
CASE "A01", "A04"
	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	'New Patient registration.  Patient cannot already exist.
	'OK to create new patient if there is an existing patient for this patient ID that is removed or merged away
	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	query = "select name from patient, patient_revision where patient.name = patient_revision.patient_name and patient.revision_no = patient_revision.revision_no "
	query = query + " and t_external_id = '{patientID}' and removed = 'F' and active_flag = 'T' and merged = 'F' "
	status = SQL(query, "tempArray",  , "F",  ,  , "T")
	numPatients = Ubound(tempArray, 1)

	IF (numPatients > 0) THEN
		hasHL7InitialErrors = TRUE
		newErrorMessage =  NLS("T_CHTErrorADTNewPatientPatientAlreadyExists", "*Cannot create new patient.  Patient already exists:") + patientID
		errorMessage = errorMessage + newErrorMessage
		errorCodesIndex = errorCodesIndex + 1
		errorCodesArray[errorCodesIndex] = "PATIENT_EXISTS"
	ENDIF
	
CASE "A08"
	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	'Update patient.  Patient must exist.   Patient cannot be removed or merged away. 
	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	query = "select name from patient, patient_revision where patient.name = patient_revision.patient_name and patient.revision_no = patient_revision.revision_no "
	query = query + " and t_external_id = '{patientID}' and removed = 'F' and active_flag = 'T' and merged = 'F' "
	status = SQL(query, "tempArray",  , "F",  ,  , "T")
	numPatients = Ubound(tempArray, 1)

	IF (numPatients = 0) THEN
		hasHL7InitialErrors = TRUE
		newErrorMessage =  NLS("T_CHTErrorADTUpdatePatientNoExists", "*Cannot update patient.  Patient does not  exist:") + patientID
		errorMessage = errorMessage + newErrorMessage
		errorCodesIndex = errorCodesIndex + 1
		errorCodesArray[errorCodesIndex] = "PATIENT_NO_EXIST"
	ENDIF 
	
CASE "A18"
	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	'Merge patient.  Patient must exist.   Patient cannot be removed or merged away. 
	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	query = "select name from patient, patient_revision where patient.name = patient_revision.patient_name and patient.revision_no = patient_revision.revision_no "
	query = query + " and t_external_id = '{patientID}' and removed = 'F' and active_flag = 'T' and merged = 'F' "
	status = SQL(query, "tempArray",  , "F",  ,  , "T")
	numPatients = Ubound(tempArray, 1)

	IF (numPatients = 0) THEN
		hasHL7InitialErrors = TRUE
		newErrorMessage =  NLS("T_CHTErrorADTMergeIntoPatientNoExists", "*Cannot merge into this patient.  Patient does not  exist:") + patientID
		errorMessage = errorMessage + newErrorMessage
		errorCodesIndex = errorCodesIndex + 1
		errorCodesArray[errorCodesIndex] = "PATIENT_NO_EXIST"
	ENDIF 

	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	'Patient being merged must exist.   Patient cannot be removed or merged away. 
	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	query = "select name from patient, patient_revision where patient.name = patient_revision.patient_name and patient.revision_no = patient_revision.revision_no "
	query = query + " and t_external_id = '{mergePatientID}' and removed = 'F' and active_flag = 'T' and merged = 'F' "
	status = SQL(query, "tempArray",  , "F",  ,  , "T")
	numPatients = Ubound(tempArray, 1)

	IF (numPatients = 0) THEN
		hasHL7InitialErrors = TRUE
		newErrorMessage =  NLS("T_CHTErrorADTMergePatientNoExists", "*Cannot merge this patient.  Patient does not  exist:") + mergePatientID
		errorMessage = errorMessage + newErrorMessage
		errorCodesIndex = errorCodesIndex + 1
		errorCodesArray[errorCodesIndex] = "PATIENT_MRG_NO_EXIST"
	ENDIF 
	
CASE ELSE
	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	'Invalid trigger event
	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	hasHL7InitialErrors = TRUE
	newErrorMessage =  NLS("T_CHTErrorADTInvalidTriggerEvent", "*Invalid Trigger Event in MSH.9:") + messageTypeTriggerEvent
	errorMessage = errorMessage + newErrorMessage
	errorCodesIndex = errorCodesIndex + 1
	errorCodesArray[errorCodesIndex] = "BAD_MSH9_EVENT"
ENDSELECT

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Cleanup
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------


return
====== Subroutine HL7_CHECK_ADT_STRUCTURE Ends here ===
====== Subroutine HL7_CHECK_MANDATORY_FIELDS Starts here ===
'----       Subroutine:   HL7_CHECK_MANDATORY_FIELDS
'----       Function:   Check for the presence (and in some cases format) of fields in incoming HL7 templates based upon the "Required" field
'----
'----       INPUTS:
'----            Context: parsed HL7 message and its variables (varies by template)
'----
'----            Variables (incl global)
'----                HL7Template
'----                errorCodesArray, errorCodesIndex
'----                msgToTemplateMapArray - Col 1: Segement, Col2: Message Segement Index, Col3:  Template Segment Index (from HL7 PARSE)
'----				elementRepeatMapArray - Cols 1-6: Segment, Msg Segment Index, Template Segment Index, Element Name, Msg Element Index, Template Element Index
'----
'----       OUTPUTS:
'----            Context:
'----                None
'----            Variables (incl global)
'----                hasHL7InitialErrors 
'----
'----    Caveats:
'----                None
'----
'----    Revisions:
'----
'---- Date                   Author                              Details
'---- 02-Oct-2013    Stan Ingold         Initial configuration
'---- 30-Oct-2014    Susan Epstein     Match by template index - only check mandatory fields based on the message index to template index match
'---- 26-Jan-2017      Stan Ingold         Check for missing segment (with mandatory fields)
'---- 27-Apr-2017   Susan Epstein     CHT0018-005 Check mandatory fields by matching element (template vs message)
'---- 03-May-2017	 Kathy Brody		 	   NLS of messages in code - format based on NLS Template
'---- 29-Oct-2018   Susan Epstein          T0009V04-T2494EK Move check message structure call to IN  INITIAL. (makes more sense from there)
'---- 16-Nov-2022	Arun Tyagi	 	   Added variable errorMessageHealius to stored all the missing information

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Determine message direction being processed
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
query = "select t_direction from hl7_template where name = '" + HL7Template + "' "
status = SQL(query, "tempArray")
messageDirection = tempArray[1, 1]

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Find the mandatory fields in the template being checked
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
query = "select segment, element_name, component_name,sub_component_name, index_number, mapped_table, mapped_field, "
query = query + " variable_name, field_index, hl7_id_number"
query = query + " from hl7_template_flds where required = 'T' and template = '" + HL7Template + "' "
status = SQL(query, "mandatoryFieldsArray", , "T", )
numMandatoryFields = Ubound(mandatoryFieldsArray, 1)

mandatoryHandle = HL7Parse(hl7String)
mandatoryFieldsMissing = 0
newErrorMessage = ""
numMessageSegments = Ubound(msgToTemplateMapArray, 1)
segmentMissing = false
previousSegment = ""
FOR iMandatoryFields = 1 TO numMandatoryFields
	newErrorMessageHealius = ""
	mandatorySegment = mandatoryFieldsArray[iMandatoryFields, 1]
	mandatoryElement = mandatoryFieldsArray[iMandatoryFields, 2]
	mandatoryComponent = mandatoryFieldsArray[iMandatoryFields, 3]
	mandatorySubComponent = mandatoryFieldsArray[iMandatoryFields, 4]
	mandatorySegmentIndex = mandatoryFieldsArray[iMandatoryFields, 5]
	objectTable = mandatoryFieldsArray[iMandatoryFields, 6]
	fieldName = mandatoryFieldsArray[iMandatoryFields, 7]
	variableName = mandatoryFieldsArray[iMandatoryFields, 8]
	mandatoryElementTemplateFieldIndex = mandatoryFieldsArray[iMandatoryFields, 9]
	HL7FieldID = mandatoryFieldsArray[iMandatoryFields, 10]    'i.e. 3.6.3

	iMessageSegmentCounter = 0
	segmentFound = false
	WHILE (iMessageSegmentCounter < numMessageSegments) 
		newErrorMessageHealius = ""
		iMessageSegmentCounter = iMessageSegmentCounter + 1
		messageSegment = msgToTemplateMapArray[iMessageSegmentCounter, 1]
		messageSegmentIndex = msgToTemplateMapArray[iMessageSegmentCounter, 2]
		messageSegmentTemplateIndex = msgToTemplateMapArray[iMessageSegmentCounter, 3]

		IF ((messageSegment = mandatorySegment) AND (mandatorySegmentIndex = messageSegmentTemplateIndex)) THEN
			segmentFound = true
			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			'Does this template field index map to a message field index?
			'If not, the template Field index = message field index.
			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			status = ClearArray("elementMatchArray") 
			status = ClearArray("arraySearchColumnsArray")
			status = ClearArray("arraySearchValuesArray")
			arraySearchColumnsArray[1] = 1
			arraySearchColumnsArray[2] = 2
			arraySearchColumnsArray[3] = 4
			arraySearchColumnsArray[4] = 6

			arraySearchValuesArray[1] = mandatorySegment
			arraySearchValuesArray[2] = messageSegmentIndex
			arraySearchValuesArray[3] = mandatoryElement
			arraySearchValuesArray[4] = mandatoryElementTemplateFieldIndex

			status = ArraySearchRows(elementRepeatMapArray, "elementMatchArray", arraySearchColumnsArray, arraySearchValuesArray) 
			numElementMsgMatch = Ubound(elementMatchArray, 1)

			hasRepeatElementMatchingConditions = false
			IF (numElementMsgMatch > 0) THEN
				hasRepeatElementMatchingConditions = true	
			ELSE 
				numElementMsgMatch = 1
			ENDIF 

			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			'Loop through the message elements for this template element (usually only 1)
			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			FOR iElementMatch = 1 to numElementMsgMatch
				newErrorMessageHealius = ""
				IF (hasRepeatElementMatchingConditions) THEN
					elementRepeatArrayIndex = elementMatchArray[iElementMatch]
					messageFieldIndex = elementRepeatMapArray[elementRepeatArrayIndex, 6]
				ELSE 
					messageFieldIndex = mandatoryElementTemplateFieldIndex 
				ENDIF 

				HL7FieldValue = HL7FieldFromSegment(mandatoryHandle, mandatorySegment, messageSegmentIndex, mandatoryElement, mandatoryComponent, mandatorySubComponent, messageFieldIndex)
				IF ((HL7FieldValue = EMPTY) OR (HL7FieldValue = ERROR)) THEN
					HL7FieldValue = ""
				ENDIF

				IF (IsEmpty(HL7FieldValue)) THEN
					hasHL7InitialErrors = true
					mandatoryFieldsMissing = mandatoryFieldsMissing + 1
					newErrorMessage = ContextTranslate(NLS("T_CHTErrorReqValMandatorySegmentMissing", "*Required value missing for {mandatorySegment} ({messageSegmentIndex}) : {HL7FieldID}"))
					newErrorMessageHealius = ContextTranslate(NLS("T_CHTErrorReqValMandatorySegmentMissing", "*Required value missing for {mandatorySegment} ({messageSegmentIndex}) : {HL7FieldID}"))
					IF (hasRepeatElementMatchingConditions) THEN
						newErrorMessage = newErrorMessage + " (" + str(messageFieldIndex) + ")"
						newErrorMessageHealius = newErrorMessageHealius + " (" + str(messageFieldIndex) + ")"
					ENDIF

					IF (NOT(IsEmpty(objectTable))) THEN    
						query = "select pretty_name from table_master where name = '" + objectTable + "' "
						status = SQL(query,"tempArray")
						prettyTableName = tempArray[1, 1]
						varNLSDefault = PrettyString(fieldName)
						varNLSKey = objectTable + "." + fieldName
						fieldNLS = NLS(varNLSKey, varNLSDefault)
						newErrormessage = newErrorMessage + ContextTranslate(" ({prettyTableName} {fieldNLS}) ")	
						newErrorMessageHealius = newErrorMessageHealius + ContextTranslate(" ({prettyTableName} {fieldNLS}) ")	
					ELSE 
						newErrormessage = newErrorMessage + ContextTranslate(" ({mandatoryElement} {mandatoryComponent}) ")
						newErrorMessageHealius = newErrorMessageHealius + ContextTranslate(" ({mandatoryElement} {mandatoryComponent}) ")
					ENDIF
				ELSE
					GoSub HL7_CHECK_FIELDS_CASE 
				ENDIF	'field value empty check
				errorMessageHL7 = errorMessageHL7 & " " & newErrorMessageHealius 
			NEXT 	'msg element that matches this template element index

		ENDIF    'message segment/index matches template segment/index for this mandatory field
	WEND    'next message segment/index

	IF (NOT(segmentFound)) THEN
		IF (mandatorySegment <> previousSegment) THEN
			hasHL7InitialErrors = TRUE
			IF (NOT(IsEmpty(errormessage))) THEN
				errormessage = errormessage + ", "
			ENDIF
			errorMessage = errorMessage + ContextTranslate(NLS("T_CHTErrorRequiredSegmentMissing", "*Required Segment missing: {mandatorySegment}"))
			errorCodesIndex = errorCodesIndex + 1
			errorCodesArray[errorCodesIndex] = "SGMT_MSSNG"
			previousSegment = mandatorySegment
		ENDIF
	ENDIF

NEXT

IF (mandatoryFieldsMissing > 0) THEN
	IF (NOT(IsEmpty(errormessage))) THEN
		errormessage = errormessage + ", "
	ENDIF
	errorMessage = errorMessage + newErrorMessage
	errorCodesIndex = errorCodesIndex + 1
	IF (mandatoryFieldsMissing > 1) THEN
		errorCodesArray[errorCodesIndex] = "FLD_MISSNG (X " + mandatoryFieldsMissing + ")"
	ELSE
		errorCodesArray[errorCodesIndex] = "FLD_MISSNG"
	ENDIF
ENDIF

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Cleanup
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
status = HL7DiscardMessage(mandatoryHandle)
status = ClearArray("mandatoryFieldsArray")
status = ClearArray("tempArray")
status = ClearArray("arraySearchColumnsArray")
status = ClearArray("arraySearchValuesArray")
status = ClearArray("elementMatchArray") 

RETURN
====== Subroutine HL7_CHECK_MANDATORY_FIELDS Ends here ===
====== Subroutine H Starts here ===
// Subroutine not found in database
====== Subroutine H Ends here ===
====== Subroutine HL7_CHECK_ORDER_STRUCTURE Starts here ===
'----       Subroutine:   HL7_CHECK_ORDER_STRUCTURE
'----       Function:   Checks the incoming HL7 order message structure
'----
'----       INPUTS:
'----            Context:
'----
'----            Variables (incl global)
'----                 HL7MessageEntryCode 
'----                 LOINCOrderedArray
'----                 errorCodesArray,errorCodesIndex 
'----
'----       OUTPUTS:
'----            Context:
'----                None
'----            Variables (incl global)
'----                None 
'----
'----    Caveats:
'----                None
'----
'----    Revisions:
'----
'---- Date                   Author                              Details
'---- 16-Oct-2013    Stan Ingold         Initial configuration
'---- 05-Jan-2015    Stan Ingold         Syntax error fix (extra quotes line 50 for array ArrayToCSVString)
'---- 23-Jan-2017    Susan/Stan         LW7:  Array Distinct Values does not work on empty array.  check first.
'---- 3-Apr-2017     Susan/Stan         Fix query for checking existing samples this tube ID (sample table only), Remove Nulls from practitioner NPI array
'---- 03-May-2017  Kathy Brody       NLS of messages in code - format based on NLS Template
'---- 25-Jul-2017     Susan				       CHT0024 variable analysisArray in OBR 4.1 becomes LOINCOrderedArray

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Initialize Variables
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Declare sampleTubeIDMatchArray[] messageTubeIDMatchArray[]
Declare LOINCOrderedMatchArray[]

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Tube ID can come in a singular segment (like the SPM) in variable "tubeID"
'If it arrives in the message in a repeated segment (like OBR) it will be in an array 
'In that case, verify tube IDs in message are unique (if more than one) and populate the "tubeID" variable
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF (NOT(IsEmpty(tubeID))) THEN
	'-------------------------------------------------------------------------------------------------------------------------------
	'Check to make sure no samples exist with the message tube ID that are not canceled, rejected, or authorized
	'-------------------------------------------------------------------------------------------------------------------------------
	query = "select distinct(sample.sample_number) from sample where t_tube_id = '" + tubeID + "' "
	query = query + " and sample.status not in ('X', 'R', 'A') "
	status = SQL(query,"sampleTubeIDMatchArray", , "F", )
	numExistingSamplesForTubeID = Ubound(sampleTubeIDMatchArray, 1)

	IF (numExistingSamplesForTubeID > 0) THEN
		hasHL7InitialErrors = TRUE
		CSVString = ArrayToCSVString(sampleTubeIDMatchArray, ", ")
		newErrorMessage = ContextTranslate(NLS("T_CHTErrorUnreceivedSamplesExistForTubeId", "*Unreceived or active samples already exist for this Tube ID: ({tubeID}) Samples: ({CSVString})."))
		errorMessage = errorMessage + newErrorMessage
		errorCodesIndex = errorCodesIndex + 1
		errorCodesArray[errorCodesIndex] = "TUBE_SAMP"
	ENDIF

	'-------------------------------------------------------------------------------------------------------------------------------
	' Check for other HL7 messages coming from the same application (based upon the OID) 
	' that have the same tube ID (and the message status is not rejected or complete) 
	'-------------------------------------------------------------------------------------------------------------------------------
	query = "select entry_code from t_hl7_message_in where tube_id = '" + tubeID + "' and status not in ('R', 'C') "
	query = query + " and entry_code <> " + str(HL7MessageEntryCode)
	query = query + " and sending_app_oid = '" + sendingApplicationOID + "' "
	status = SQL(query, "messageTubeIDMatchArray", , "F", )
	numExistingMessagesForTubeID = Ubound(messageTubeIDMatchArray,1)

	IF (numExistingMessagesForTubeID > 0) THEN
		hasHL7InitialErrors = TRUE
		CSVString = ArrayToCSVString(messageTubeIDMatchArray, ", ")
		newErrorMessage =  ContextTranslate(NLS("T_CHTErrorMessagesExistForTubeId", "*Messages already exist for this Tube ID: : ({tubeID}) Messages: ({CSVString})."))
		errorMessage = errorMessage + newErrorMessage
		errorCodesIndex = errorCodesIndex + 1
		errorCodesArray[errorCodesIndex] = "TUBE_MSG"
	ENDIF
ENDIF

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Check to make sure the ordered LOINC matches only one orderable test or test list in the database
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
numOBR = Ubound(LOINCOrderedArray, 1)

FOR iOBR = 1 to numOBR
	analysisOrdered = LOINCOrderedArray[iOBR]
	query = "select count(*) from v_elo_orderable "
	query = query + " where loinc = '" + analysisOrdered + "' "
	status = SQL(query, "LOINCOrderedMatchArray",  , "F", )

	numLOINCOrderedMatches = LOINCOrderedMatchArray[1, 1]
	IF (numLOINCOrderedMatches <> 1) THEN
		'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'Has errors on matching order analysis
		'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
		hasHL7InitialErrors = true
		errorCodesIndex = errorCodesIndex + 1
		errorCodesArray[errorCodesIndex] = "ANALY_MTCH"
		IF (numLOINCOrderedMatches = 0) THEN
			newErrorMessage = ContextTranslate(NLS("T_CHTErrorAnalysisOrderedDoesNotMatchAnalysis","* {analysisOrdered} does not match any analysis/test list."))
		ELSE
			newErrorMessage =ContextTranslate(NLS("T_CHTErrorAnalysisOrderedMultiMatchAnalysis","* {analysisOrdered} matches more than one analysis/test list.")) 
		ENDIF    
		errorMessage = errorMessage  + newErrorMessage       
	ENDIF    'Have single match (analysis or Test List) for LOINC requested
NEXT

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Check validity of practitioner fields (if present) 
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
query = "select distinct variable_name from hl7_template_flds where template = '" + HL7Template + "' and mapped_table = 'PRACTITIONER' "
query = query + " and variable_name in ('practitionerLastNameArray', 'practitionerNPIArray') "
status = SQL(query, "tempArray", , "F")
numPractitionerVariableMatch = Ubound(tempArray, 1)

IF (numPractitionerVariableMatch > 0) THEN
	status = ClearArray("distinctNPIArray")

	numPractitioners = Ubound(practitionerLastNameArray, 1)
	numNPI = Ubound(practitionerNPIArray, 1)
	numDistinctNPI = 0
	IF (numNPI > 0) THEN
		status = ArrayRemoveNulls(practitionerNPIArray)
		numDistinctNPI = ArrayDistinctValues(practitionerNPIArray, "distinctNPIArray")
	ENDIF
	IF ((numPractitioners <> numNPI) OR (numDistinctNPI > 1)) THEN
		hasHL7InitialErrors = true
		IF (numDistinctNPI > 1) THEN
			errorMessage = errorMessage + NLS("T_CHTErrorMulitpleNPIInMessage", "*More than one practitioner NPI in message")
		ELSE
			errorMessage = errorMessage + NLS("T_CHTErrorNumPractitionersDiffNumNPI", "*# Practitioners different from # NPIs")
		ENDIF
		errorCodesIndex = errorCodesIndex + 1
		errorCodesArray[errorCodesIndex] = "PRACT_NPI"
	ENDIF
ENDIF

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'CASE statement for template specific structure checking
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
SELECTCASE HL7Template
CASE "HL7_ELO"
	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	'Check to make sure that the tubeIDarray contains unique values
	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	numTubes = Ubound(tubeIDArray, 1)
	IF (numTubes > 0) THEN
		numDistincttubeID = ArrayDistinctValues(tubeIDArray, "tubeIDUniqueArray")       
		IF (numDistincttubeID > 1) THEN
			hasHL7InitialErrors = TRUE
			tubeIDUniqueCSVString = ArrayToCSVString(tubeIDUniqueArray, ",")
			newErrorMessage = ContextTranslate(NLS("T_CHTErrorMessageHasNonUniqueTubeId","* Message contains non unique tube IDs {tubeIDUniqueCSVString}. "))
			errorMessage = errorMessage + newErrorMessage
			errorCodesIndex = errorCodesIndex + 1
			errorCodesArray[errorCodesIndex] = "TUBE_DUPS"
			tubeID = ""
		ELSE
			tubeID = tubeIDUniqueArray[1]
		ENDIF
	ENDIF
CASE ELSE
	'do nothing
ENDSELECT

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Cleanup
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
status = ClearArray("distinctNPIArray")
status = ClearArray("tubeIDUniqueArray")

return
====== Subroutine HL7_CHECK_ORDER_STRUCTURE Ends here ===
====== Subroutine HL7_CHECK_RESULT_STRUCTURE Starts here ===
'----       Subroutine:   HL7_CHECK_RESULT_STRUCTURE
'----       Function:   Checks the incoming HL7 message structure
'----
'----       INPUTS:
'----            Context:
'----
'----            Variables (incl global)
'----                 hl7String 
'----                 placerSpecimenID or placerSpecimenIDArray
'----                 errorCodesArray, errorCodesIndex 
'----
'----       OUTPUTS:
'----            Context:
'----                None
'----            Variables (incl global)
'----                None 
'----
'----    Caveats:
'----                Only called on RESULT_IN messages (not Order Messages)
'----
'----    Revisions:
'----
'---- Date                   Author                              Details
'---- 16-Oct-2013    Stan Ingold         Initial configuration
'---- 17-Apr-2017	 Kathy Brody		 	   NLS of messages in code - format based on NLS Template
'---- 18-May-2020        Susan            T5013SG Placer Specimen ID may be an array (repeating ORC)

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Parse message and determine number of OBR Segments
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
structureHandle = HL7Parse(hl7String)

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'For incoming result messages (ELRs), check to make sure each OBR has at least one OBX associated with it
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
status = HL7SegmentInfo(structureHandle, "segmentInfoArray")
numSegments = Ubound(segmentInfoArray, 1)
status = ArrayFilterIndex(segmentInfoArray,  ,  , "OBR", "segmentsOBRIndexArray")
numOBR = Ubound(segmentsOBRIndexArray, 1)
hasMissingOBX = false

FOR iOBR = 1 to numOBR
	segmentsArrayIndex = segmentsOBRIndexArray[iOBR]
	numElements = ArrayOfSubStrings(segmentsArrayIndex, ",","tempArray","F")
	segmentsArrayIndex = tempArray[1]
	segmentsArrayIndex = val(segmentsArrayIndex)
	segmentsArrayIndex = segmentsArrayIndex + 1
	segmentName = segmentInfoArray[segmentsArrayIndex, 1]

	thisOBRHasOBX = false
	WHILE ((segmentName <> "OBR") AND (segmentsArrayIndex <= numSegments))
		IF (segmentName = "OBX") THEN
			thisOBRHasOBX = true
		ENDIF
		'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'Increment to next segment
		'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
		segmentsArrayIndex = segmentsArrayIndex + 1
		segmentName = segmentInfoArray[segmentsArrayIndex, 1]

	WEND
	IF (NOT(thisOBRHasOBX)) THEN
		hasMissingOBX = true
	ENDIF
NEXT

IF (hasMissingOBX) THEN
	hasHL7InitialErrors = TRUE
	errorMessage = errorMessage + NLS("T_CHTErrorNotAllOBRHaveAtLeastOneOBX","* Not all OBR have at least one OBX.  ")
	errorCodesIndex = errorCodesIndex + 1
	errorCodesArray[errorCodesIndex] = "OBX_MISS"
ENDIF

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Placer Specimen ID must match one and only one LIMS Sample
'Placer specimen ID may come from an array or a single value
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF (IsEmpty(placerSpecimenID)) THEN
	numPlacerSpecimenID = Ubound(placerSpecimenIDArray)
	IF (numPlacerSpecimenID > 0) THEN
		numDistinct = ArrayDistinctValues(placerSpecimenIDArray, "tempArray")
		IF (numDistinct = 1) THEN
			placerSpecimenID = tempArray[1]
		ELSE 
			hasHL7InitialErrors = TRUE
			newErrorMessage = " Multiple specimen IDs in one message: (" + ArrayToCSVString(tempArray, ",")  + ").  "
			errorMessage = errorMessage + newErrorMessage
			errorCodesIndex = errorCodesIndex + 1
			errorCodesArray[errorCodesIndex] = "NOLABLMTCH"
		ENDIF 
	ENDIF 
ENDIF			

IF (NOT(IsEmpty(placerSpecimenID))) THEN
	query = "select sample.sample_number from sample where label_id = '" + placerSpecimenID + "' "
	query = query + " and sample.status <> 'R' "
	status = SQL(query,"sampleBarcodeIDMatchArray", , "F", )
	numExistingSamplesForPlacerID = Ubound(sampleBarcodeIDMatchArray, 1)
	IF (numExistingSamplesForPlacerID = 0) THEN
		hasHL7InitialErrors = TRUE
		newErrorMessage = " No samples exist for this Label ID: (" + placerSpecimenID + ").  "
		errorMessage = errorMessage + newErrorMessage
		errorCodesIndex = errorCodesIndex + 1
		errorCodesArray[errorCodesIndex] = "NOLABLMTCH"
	ENDIF

	IF (numExistingSamplesForPlacerID > 1) THEN
		hasHL7InitialErrors = TRUE
		CSVString = ArrayToCSVString(sampleBarcodeIDMatchArray, ", ")
		newErrorMessage =  ContextTranslate(NLS("T_CHTErrorMultSampExistForLabelId"," Multiple samples already exist for this Label ID: ({placerSpecimenID}) Samples: ({CSVString}). "))
		errorMessage = errorMessage + newErrorMessage
		errorCodesIndex = errorCodesIndex + 1
		errorCodesArray[errorCodesIndex] = "LABLIDMULT"
	ELSE
		LIMSSampleNumber = sampleBarcodeIDMatchArray[1, 1]
	ENDIF
ENDIF    'have placerSpecimenID

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Cleanup
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
status = ClearArray("segmentsOBRIndexArray")
status = ClearArray("segmentInfoArray")
status = ClearArray("tempArray")
status = ClearArray("sampleBarcodeIDMatchArray")
status = HL7DiscardMessage(structureHandle)
====== Subroutine HL7_CHECK_RESULT_STRUCTURE Ends here ===
====== Subroutine HL7_IN_INITIAL_ADDITIONAL Starts here ===
declare routineName
routineName = "HL7_IN_INITIAL_ADDITIONAL"
' ====================================================================================
' Abstract: This subroutine is used to populate the additional details in HL7 in table
'        
'
' Inputs:
'   Context:
'        
'   Variables (inc global):
'        
' Outputs:
'   Context:
'        
'   Variables:
'        
'
' Change History:
' Date									By						   Reason
' 08-Nov-2022					ARUN TYAGI		Subroutine to populate additional fields in HL7_MESSAGE_IN table
' 22-Feb-2024					ARUN TYAGI		Added extra fields to be passed for creating patient and in HL7_MESSAGE_IN table
'25-Jul-2024					  Akash					  Added code logic to handle when these optional fields are missed to add which breaks array join function and add icd10 variable and billing variable
'04-Sep-2024					Akash					Added code to store customer practitioner code from HL7 inbound
'07-Oct-2024					Akash					Added loop to handle insurance field array nul value handling to handle all insurance fields 
'18-Oct-2024					Akash					Check whether the client ID is present or not if not present then qurey only with external id else use customer and MRN combination for finding duplicate patient and Added condition to check firstname, lastname and birthdate - when no MRN present
'24-Oct-2024					Akash					updated the patient matching logic and pass ssn to be added as medical record number 2
'03-Jan-2025                    Augustin Raja     Add  code logic to Inserting zipcode from HL7 in message from patient, insurance and guarantor part
'05-Feb-2025					Akash					updated the code to incldue the new field obx and store in Z_HL7_INBOUND_DATA table and added code to call base64 strng to files converter subroutine
' ====================================================================================
status = ClearArray("arrayPatientName") 
status = ClearArray("arrayPatient") 
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Add additional fields name from T_HL7_MESSAGE_IN table
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "EXTERNAL_KEY"  
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "SENDING_APPLICATION"
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "SENDING_FACILITY"
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "X_PATIENT_CREATED"
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "X_PATIENT_ID" 
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "X_SAMPLED_ON"	
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "X_REQUISITION_FILE"	
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "X_TEST_REQUESTED"	
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "X_TEST_CODE"	
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "X_TUBE_1_ACCESSION"	
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "X_TUBE_2_ACCESSION"
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "X_ICD10_CODES" 'Added by AKash on 29Jul2024
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "X_BILLING" 'Added by AKash on 29Jul2024
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "CUST_PRACT_CODE" 'Added by Akash on 04Sep2024
HL7InFieldIndex = HL7InFieldIndex + 1
HL7MsgInFieldArray[HL7InFieldIndex] = "X_OBX_FILES" 'Added by Akash on 04Feb2025
IF (UBound(sampledDate, 1)  > 0) THEN 
	dateYMDHMSString = sampledDate[1]
	GOSUB DATE_FROM_YMDHMS
	sampledDateString = outputDate 
ENDIF
testNameStr = ArrayToCSVString(testName, ",") 
testCodeStr = ArrayToCSVString(testCode , ",") 
custPractCode = ""
totalTubeAccession = UBound(tubeAccession, 1) 
IF (totalTubeAccession = 1) THEN 
	tube1Accession = tubeAccession[1]
	tube2Accession = ""
ELSEIF (totalTubeAccession > 1) THEN
	tube1Accession = tubeAccession[1]
	tube2Accession = tubeAccession[2]
ELSE
	tube1Accession = ""
	tube2Accession = ""
ENDIF 
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Create OR Revise Patient in LIMS 
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF (Not(hasHL7InitialErrors)) THEN
	status = ClearArray("fieldsPatient") 
	status = ClearArray("valuesPatient") 
	indexPatient = 1
	fieldsPatient[indexPatient] = "FIRST_NAME"
	indexPatient = indexPatient + 1
	fieldsPatient[indexPatient] = "LAST_NAME"
	indexPatient = indexPatient + 1
	fieldsPatient[indexPatient] = "T_EXTERNAL_ID"
	indexPatient = indexPatient + 1
	fieldsPatient[indexPatient] = "BIRTH_DATE"
	indexPatient = indexPatient + 1
	fieldsPatient[indexPatient] = "GENDER"
	indexPatient = indexPatient + 1

	'Changed By Arun on Feb 22, 2024
	IF (HL7Template = "IE_HL7_CLIA_INBOUND") THEN 
		fieldsPatient[indexPatient] = "MIDDLE_NAME"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "NAME_PREFIX"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "NAME_SUFFIX"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "ADDRESS1_LINE_1"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "ADDRESS1_LINE_2"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "ADDRESS1_CITY"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "ADDRESS1_STATE"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "ADDRESS1_ZIP"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "ADDRESS1_COUNTRY"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "HOME_PHONE"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "T_RACE"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "T_ETHNICITY"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "SSN"
		indexPatient = indexPatient + 1

		status = ClearArray("arrayInsuranceDetails") 
		status = ClearArray("arrayInsuranceDetails1") 
		status = ClearArray("arrayInsuranceDetails2") 
		status = ClearArray("arrayInsuranceDetails3") 
		status = ClearArray("arrayInsuranceDetails4") 
		status = ClearArray("arrayInsuranceDetails5") 
		status = ClearArray("arrayInsuranceDetails6") 
		status = ClearArray("arrayInsuranceDetails7") 
		status = ClearArray("arrayInsuranceDetails8") 
		status = ClearArray("arrayInsuranceDetails9") 
		status = ClearArray("arrayInsuranceDetails10") 

		'Added code logic to handle when these optional fields are missed to add which breaks array join function - changed on 25Jul2024 by Akash
		availableInsurances = UboundArray(insuranceSetID, 1) 'Updated the logic and convert it to loop - By Akash on 04Oct2024
		IF (availableInsurances = 1) THEN
			'Initializing all insurance fields 
			insuranceFieldIncreamentIndex = 1
			arrayInsuranceFields[insuranceFieldIncreamentIndex] = "insuranceCompanyID"
			insuranceFieldIncreamentIndex = insuranceFieldIncreamentIndex + 1
			arrayInsuranceFields[insuranceFieldIncreamentIndex] = "insurancePlanID"
			insuranceFieldIncreamentIndex = insuranceFieldIncreamentIndex + 1
			arrayInsuranceFields[insuranceFieldIncreamentIndex] = "insuranceCompanyName"
			insuranceFieldIncreamentIndex = insuranceFieldIncreamentIndex + 1
			arrayInsuranceFields[insuranceFieldIncreamentIndex] = "insuranceCompanyAddress1"
			insuranceFieldIncreamentIndex = insuranceFieldIncreamentIndex + 1
			arrayInsuranceFields[insuranceFieldIncreamentIndex] = "insuranceCompanyAddress2"
			insuranceFieldIncreamentIndex = insuranceFieldIncreamentIndex + 1
			arrayInsuranceFields[insuranceFieldIncreamentIndex] = "insuranceCompanyCityName"
			insuranceFieldIncreamentIndex = insuranceFieldIncreamentIndex + 1
			arrayInsuranceFields[insuranceFieldIncreamentIndex] = "insuranceCompanyStateName"
			insuranceFieldIncreamentIndex = insuranceFieldIncreamentIndex + 1
			arrayInsuranceFields[insuranceFieldIncreamentIndex] = "insuranceCompanyZIPCode"
			insuranceFieldIncreamentIndex = insuranceFieldIncreamentIndex + 1
			arrayInsuranceFields[insuranceFieldIncreamentIndex] = "insuranceCompanyCountryName"
			insuranceFieldIncreamentIndex = insuranceFieldIncreamentIndex + 1
			arrayInsuranceFields[insuranceFieldIncreamentIndex] = "insuranceGroupNumber"
			insuranceFieldIncreamentIndex = insuranceFieldIncreamentIndex + 1
			arrayInsuranceFields[insuranceFieldIncreamentIndex] = "insuranceType"
			insuranceFieldIncreamentIndex = insuranceFieldIncreamentIndex + 1
			arrayInsuranceFields[insuranceFieldIncreamentIndex] = "insurancePolicyNumber"
			insuranceTotalFieldIndex = UBound(arrayInsuranceFields, 1) 

			'looping thorugh all fields and set the initial field array if array has no index
			FOR insuranceFieldIndex = 1 TO insuranceTotalFieldIndex
				status = ClearArray("tempInsuranceFieldArray") 
				arrayInsuranceFieldName = arrayInsuranceFields[insuranceFieldIndex]
				tempInsuranceFieldArray = ArrayWithName(arrayInsuranceFieldName) 
				'check whether the insurance field has values if not inserting new one index to that array 
				tempInsuranceIndex = Ubound(tempInsuranceFieldArray, 1) 
				IF (tempInsuranceIndex = 0) THEN
					status = ArrayInitialize(arrayInsuranceFieldName, 1, 1, "") 
				ENDIF 
			NEXT 
		ENDIF 

		status = ArrayJoin(insuranceCompanyID, insurancePlanID, "arrayInsuranceDetails1", "Column") 
		status = ArrayJoin(arrayInsuranceDetails1, insuranceCompanyName, "arrayInsuranceDetails2", "Column") 
		status = ArrayJoin(arrayInsuranceDetails2, insuranceCompanyAddress1, "arrayInsuranceDetails3", "Column") 
		status = ArrayJoin(arrayInsuranceDetails3, insuranceCompanyAddress2, "arrayInsuranceDetails4", "Column") 
		status = ArrayJoin(arrayInsuranceDetails4, insuranceCompanyCityName, "arrayInsuranceDetails5", "Column") 
		status = ArrayJoin(arrayInsuranceDetails5, insuranceCompanyStateName, "arrayInsuranceDetails6", "Column") 
		status = ArrayJoin(arrayInsuranceDetails6, insuranceCompanyZIPCode, "arrayInsuranceDetails7", "Column") 
		status = ArrayJoin(arrayInsuranceDetails7, insuranceCompanyCountryName, "arrayInsuranceDetails8", "Column") 
		status = ArrayJoin(arrayInsuranceDetails8, insuranceGroupNumber, "arrayInsuranceDetails9", "Column") 
		status = ArrayJoin(arrayInsuranceDetails9, insuranceType, "arrayInsuranceDetails10", "Column") 
		status = ArrayJoin(arrayInsuranceDetails10, insurancePolicyNumber, "arrayInsuranceDetails", "Column") 
		totalInsuranceCount = UBound(arrayInsuranceDetails, 1)		

		IF (totalInsuranceCount > 0) THEN 
			FOR index = 1 TO totalInsuranceCount 
				insuranceField = "T_INS{index}_PAYER_CODE"
				insuranceField = ContextTranslate(insuranceField) 
				fieldsPatient[indexPatient] = insuranceField 
				indexPatient = indexPatient + 1
				insuranceField = "Z_INS{index}_PLAN_ID"
				insuranceField = ContextTranslate(insuranceField) 
				fieldsPatient[indexPatient] = insuranceField 
				indexPatient = indexPatient + 1
				insuranceField = "T_INS{index}_NAME"
				insuranceField = ContextTranslate(insuranceField) 
				fieldsPatient[indexPatient] = insuranceField 
				indexPatient = indexPatient + 1
				insuranceField = "T_INS{index}_ADDRESS1"
				insuranceField = ContextTranslate(insuranceField) 
				fieldsPatient[indexPatient] = insuranceField 
				indexPatient = indexPatient + 1
				insuranceField = "Z_INS{index}_ADDRESS2"
				insuranceField = ContextTranslate(insuranceField) 
				fieldsPatient[indexPatient] = insuranceField 
				indexPatient = indexPatient + 1
				insuranceField = "T_INS{index}_CITY"
				insuranceField = ContextTranslate(insuranceField) 
				fieldsPatient[indexPatient] = insuranceField 
				indexPatient = indexPatient + 1
				insuranceField = "T_INS{index}_STATE"
				insuranceField = ContextTranslate(insuranceField) 
				fieldsPatient[indexPatient] = insuranceField 
				indexPatient = indexPatient + 1
				insuranceField = "T_INS{index}_ZIP"
				insuranceField = ContextTranslate(insuranceField) 
				fieldsPatient[indexPatient] = insuranceField 
				indexPatient = indexPatient + 1
				insuranceField = "Z_INS{index}_COUNTRY"
				insuranceField = ContextTranslate(insuranceField) 
				fieldsPatient[indexPatient] = insuranceField 
				indexPatient = indexPatient + 1
				insuranceField = "T_INS{index}_GROUP_NO"
				insuranceField = ContextTranslate(insuranceField) 
				fieldsPatient[indexPatient] = insuranceField 
				indexPatient = indexPatient + 1
				insuranceField = "T_INS{index}_TYPE"
				insuranceField = ContextTranslate(insuranceField) 
				fieldsPatient[indexPatient] = insuranceField 
				indexPatient = indexPatient + 1
				insuranceField = "T_INS{index}_POLICY_NO"
				insuranceField = ContextTranslate(insuranceField) 
				fieldsPatient[indexPatient] = insuranceField 
				indexPatient = indexPatient + 1			
			NEXT
		ENDIF
		fieldsPatient[indexPatient] = "T_NOK_FIRST_NAME"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "T_NOK_LAST_NAME"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "T_NOK_MIDDLE_NAME"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "Z_NOK_NAME_SUFFIX"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "Z_NOK_NAME_PREFIX"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "Z_NOK_ADDRESS1"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "Z_NOK_ADDRESS2"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "Z_NOK_CITY"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "Z_NOK_STATE"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "Z_NOK_ZIP"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "Z_NOK_COUNTRY"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "T_NOK_PHONE"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "Z_NOK_GENDER"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "T_NOK_RELATIONSHIP"
		indexPatient = indexPatient + 1
		fieldsPatient[indexPatient] = "Z_NOK_BIRTH_DATE"
		indexPatient = indexPatient + 1
		IF (NotEmpty(guarantorDOB) OR Not(IsNull(guarantorDOB) ) ) THEN 
			dateYMDHMSString = guarantorDOB
			GOSUB DATE_FROM_YMDHMS
			guarantorDOB = outputDate
		ELSE 
			guarantorDOB = ""
		ENDIF
	ENDIF

	dateYMDHMSString = dob
	GOSUB DATE_FROM_YMDHMS
	dob = outputDate

	indexPatient = 1
	valuesPatient[indexPatient] = firstName
	indexPatient = indexPatient + 1
	valuesPatient[indexPatient] = lastName
	indexPatient = indexPatient + 1
	valuesPatient[indexPatient] = patientID 
	indexPatient = indexPatient + 1
	valuesPatient[indexPatient] = dob
	indexPatient = indexPatient + 1
	valuesPatient[indexPatient] = gender
	indexPatient = indexPatient + 1
	IF (HL7Template = "IE_HL7_CLIA_INBOUND") THEN 
		valuesPatient[indexPatient] = middleName
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = prefixName
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = suffixName 
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = patientAddress1
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = patientAddress2
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = patientCity
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = patientState
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = patientZipPostalCode
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = patientCountry
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = patientHomePhone
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = patientRace
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = patientEthnicGroup
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = patientAccountNumber
		indexPatient = indexPatient + 1 
		IF (totalInsuranceCount > 0) THEN 
			FOR index = 1 TO totalInsuranceCount 
				valuesPatient[indexPatient] = arrayInsuranceDetails[index,1]
				indexPatient = indexPatient + 1
				valuesPatient[indexPatient] = arrayInsuranceDetails[index,2]
				indexPatient = indexPatient + 1
				valuesPatient[indexPatient] = arrayInsuranceDetails[index,3]
				indexPatient = indexPatient + 1
				valuesPatient[indexPatient] = arrayInsuranceDetails[index,4]
				indexPatient = indexPatient + 1
				valuesPatient[indexPatient] = arrayInsuranceDetails[index,5]
				indexPatient = indexPatient + 1
				valuesPatient[indexPatient] = arrayInsuranceDetails[index,6]
				indexPatient = indexPatient + 1
				valuesPatient[indexPatient] = arrayInsuranceDetails[index,7]
				indexPatient = indexPatient + 1
				valuesPatient[indexPatient] = arrayInsuranceDetails[index,8]
				indexPatient = indexPatient + 1
				valuesPatient[indexPatient] = arrayInsuranceDetails[index,9]
				indexPatient = indexPatient + 1
				valuesPatient[indexPatient] = arrayInsuranceDetails[index,10]
				indexPatient = indexPatient + 1
				patientInsuranceType = arrayInsuranceDetails[index,11]
				patientInsuranceType = Val(patientInsuranceType) 
				IF (patientInsuranceType = 1) THEN 
					patientInsuranceType = "PRIMARY"
				ELSEIF (patientInsuranceType = 2) THEN
					patientInsuranceType = "SECONDARY"
				ELSE 
					patientInsuranceType = ""				
				ENDIF
				valuesPatient[indexPatient] = patientInsuranceType 
				indexPatient = indexPatient + 1
				valuesPatient[indexPatient] = arrayInsuranceDetails[index,12]
				indexPatient = indexPatient + 1
			NEXT
		ENDIF
		valuesPatient[indexPatient] = guarantorFirstName
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = guarantorLastName
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = guarantorMiddleName 
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = guarantorSuffixName
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = guarantorPrefixName
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = guarantorAddress1
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = guarantorAddress2
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = guarantorCityName
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = guarantorStateName
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = guarantorZIPCode
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = guarantorCountryName
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = guarantorContactNumber
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = guarantorGender
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = guarantorRelationship
		indexPatient = indexPatient + 1
		valuesPatient[indexPatient] = guarantorDOB
		indexPatient = indexPatient + 1
	ENDIF
	'Inserting zipcode from HL7 in message from patient, insurance and guarantor part -- 03-Jan-2025 by Augustin Raja
	totalZipCodeCount = UBound(insuranceCompanyZIPCode , 1) 
	IF (totalZipCodeCount > 0) THEN
		FOR index = 1 To  totalZipCodeCount
			zipcode = insuranceCompanyZIPCode[index] 
			city = insuranceCompanyCityName[index]
			stateCode = insuranceCompanyStateName[index]
			countryCode = insuranceCompanyCountryName[index]
			IF city = ERROR OR Isempty(city) THEN
				city = ""
			ENDIF
			IF stateCode = ERROR OR Isempty(stateCode) THEN
				stateCode = ""
			ENDIF
			IF countryCode = ERROR OR Isempty(countryCode) THEN
				countryCode = ""
			ENDIF
			status = Subroutine("FN_INSERT_NEW_ZIPCODE") 
		NEXT
	ENDIF 
	
	IF (NotEmpty(patientZipPostalCode)) THEN
		zipcode = patientZipPostalCode
		city = patientCity
		stateCode = patientState
		countryCode = patientCountry
		status = Subroutine("FN_INSERT_NEW_ZIPCODE") 
	ENDIF		
	
	IF (NotEmpty(guarantorZIPCode)) THEN
		zipcode = guarantorZIPCode
		city = guarantorCityName
		stateCode = guarantorStateName
		countryCode = guarantorCountryName
		status = Subroutine("FN_INSERT_NEW_ZIPCODE") 
	ENDIF
	
	'Changed by Arun to create the MRN for the patient - moved this segment from below to above for getting cust pract code before and added column to get only client ID with SPLIT_PART sql function - Changed by Akash on 14Oct2024
	HL7QryCustPract= "select facility.Z_HL7_CUST_PRACT_CODE, split_part(facility.Z_HL7_CUST_PRACT_CODE, '.', 1)   from FACILITY facility  where facility.Z_SENDING_APPLICATION = '{sendingapplicationname}'"
	HL7QryCustPract = ContextTranslate(HL7QryCustPract) 
	status = SQL(HL7QryCustPract, "HL7ArrayCustPract",  , "T", )
	HL7CustPractCode = HL7ArrayCustPract[1, 1]
	submitterLIMS = Trim(HL7ArrayCustPract[1, 2])  'Changed by Akash on 14Oct2024 

	' 	patientQry = "SELECT name FROM patient WHERE t_external_id = '{patientID}'" Commented by Akash on 24Oct2024
	status = ClearInterpreterObjects("PATIENT") 
	'Check whether the client ID is present or not if not, present then qurey only with external id else use customer and MRN combination - Added by Akash on 14Oct2024
	IF (Not(IsEmpty(patientID)) OR Not(IsNull(patientID))) THEN 'run when patient id not null
		patientQry = "SELECT patient.name FROM patient JOIN t_patient_med_recs ON t_patient_med_recs.patient = patient.name AND t_patient_med_recs.customer = '{submitterLIMS}' AND t_patient_med_recs.medical_record_num = '{patientID}' WHERE first_name = '{firstName}' AND last_name = '{lastName}' AND birth_date = '" & dob & "'" 'Changed by Akash on 14Oct2024
		patientQry = ContextTranslateSQL(patientQry) 
		status = SQL(patientQry, "arrayPatientName", , , , , , , )
	ELSEIF (Not(IsEmpty(patientAccountNumber)) OR Not(IsNull(patientAccountNumber))) THEN 'run when patient account number not null
		patientQry = "SELECT patient.name FROM patient JOIN t_patient_med_recs ON t_patient_med_recs.patient = patient.name AND t_patient_med_recs.customer = '{submitterLIMS}' AND t_patient_med_recs.medical_record_num2 = '{patientAccountNumber}' WHERE first_name = '{firstName}' AND last_name = '{lastName}' AND birth_date = '" & dob & "'"  'Changed by Akash on 14Oct2024
		patientQry = ContextTranslateSQL(patientQry) 
		status = SQL(patientQry, "arrayPatientName", , , , , , , )
	ELSE 
		'Do nothing
	ENDIF 

	' 	patientQry = ContextTranslateSQL(patientQry)  Commented by Akash on 24Oct2024
	' 	status = SQL(patientQry, "arrayPatientName", , , , , , , ) Commented by Akash on 24Oct2024
	numPatient = UBound(arrayPatientName, 1) 
	IF (numPatient > 0) THEN 
		patientIdC2N = arrayPatientName[1,1]
		status = UpdatePatientFlds(patientIdC2N, fieldsPatient , valuesPatient, "T", "T") 
	ELSE 
		templateName = "HUMAN_CLIA"
		auditReasonPatient = "Patient Created For HL7 Order# " & orderNumber 
		status = CreatePatient(templateName,fieldsPatient,valuesPatient,auditReasonPatient)
		IF (status) THEN 

			' 			patienNameQry = "SELECT name FROM patient WHERE t_external_id = '{patientID}'"  - Commented by Akash on 14Oct2024
			' 			patienNameQry = ContextTranslateSQL(patienNameQry)   - Commented by Akash on 14Oct2024
			' 			status = SQL(patienNameQry, "arrayPatient", , , , , , , )  - Commented by Akash on 14Oct2024
			' 			patientIdC2N = arrayPatient[1,1]  - Commented by Akash on 14Oct2024
			patientIdC2N = SELECT PATIENT.NAME   '- Added by Akash on 14Oct2024
			patientCreateCheck = TRUE

			'Changed by Arun to create the MRN for the patient - Commented and moved to above by Akash on 14Oct2024
			' 			HL7QryCustPract= "select facility.Z_HL7_CUST_PRACT_CODE   from FACILITY facility  where facility.Z_SENDING_APPLICATION = '{sendingapplicationname}'"
			' 			HL7QryCustPract = ContextTranslate(HL7QryCustPract) 
			' 			status = SQL(HL7QryCustPract, "HL7ArrayCustPract",  , "T", )
			' 			HL7CustPractCode = HL7ArrayCustPract[1,1]
			patientMedRecNum = patientID
			patientMedRecNum2 = patientAccountNumber 'Added by Akash on 24Oct2024
			patientLIMS = patientIdC2N
			' 			submitterLIMS = Left(HL7CustPractCode,7) - Commented by Akash on 24Oct2024
			auditReason = NLS("T_AuditReasonMRNAdd" ,"Added MRN#") 
			' 			IF (NotEmpty(patientMedRecNum) OR Not(IsNull(patientMedRecNum))) THEN  'Changed by Arun on Feb 19, 2024 to add patient medical record number to the patient - Commented by Akash on 24Oct2024
			IF (NotEmpty(patientMedRecNum) OR Not(IsNull(patientMedRecNum))) OR (NotEmpty(patientMedRecNum2) OR Not(IsNull(patientMedRecNum2))) THEN  'Changed by Arun on Feb 19, 2024 to add patient medical record number to the patient/ updted by AKash on 24Oct2024, to get the patient medical record number 2
				status = Subroutine("PATIENT_ITEM_MEDREC", ) 	
			ENDIF
		ENDIF 
	ENDIF 

	IF (Not(IsEmpty(messageReceivedDateTime) )  OR Not(IsNull(messageReceivedDateTime) ) ) THEN 
		dateYMDHMSString = messageReceivedDateTime
		GOSUB DATE_FROM_YMDHMS
		messageReceivedDateTime = outputDate 
	ENDIF

	status = Subroutine("HL7_CREATE_REQUISITION_FORM") 
ENDIF

HL7InValueIndex = HL7InValueIndex + 1
HL7MsgInValueArray[HL7InValueIndex] = orderNumber 
HL7InValueIndex = HL7InValueIndex + 1
HL7MsgInValueArray[HL7InValueIndex] = sendingapplicationname
HL7InValueIndex = HL7InValueIndex + 1
HL7MsgInValueArray[HL7InValueIndex] = sendingfacilityname
HL7InValueIndex = HL7InValueIndex + 1
HL7MsgInValueArray[HL7InValueIndex]  = patientCreateCheck
HL7InValueIndex = HL7InValueIndex + 1
HL7MsgInValueArray[HL7InValueIndex] = patientIdC2N
HL7InValueIndex = HL7InValueIndex + 1
HL7MsgInValueArray[HL7InValueIndex] = sampledDateString
HL7InValueIndex = HL7InValueIndex + 1
HL7MsgInValueArray[HL7InValueIndex] = dbFileName
HL7InValueIndex = HL7InValueIndex + 1
HL7MsgInValueArray[HL7InValueIndex] = testNameStr
HL7InValueIndex = HL7InValueIndex + 1
HL7MsgInValueArray[HL7InValueIndex] = testCodeStr
HL7InValueIndex = HL7InValueIndex + 1
HL7MsgInValueArray[HL7InValueIndex] = tube1Accession 
HL7InValueIndex = HL7InValueIndex + 1
HL7MsgInValueArray[HL7InValueIndex] = tube2Accession 
HL7InValueIndex = HL7InValueIndex + 1
icd10CodesReceived = ""
sampleBillingType = ""
base64DbFileName = ""

'Added code to receive ICD10 codes from inbound HL7 message and store in T_HL7_MESSAGE_In Table - Changed by Akash on 29jul2024
IF (HL7Template = "IE_HL7_CLIA_INBOUND") THEN 
	icd10CodesReceived = ArrayToCSVString(DG1DiagnosisCode, ", ") 
	IF (IsEmpty(icd10CodesReceived)) THEN
		icd10CodesReceived = ""
	ENDIF 
	IF (IsEmpty(PV1FinancialClassCode)) THEN 
		sampleBillingType = "NA"
	ELSE 
		sampleBillingType = PV1FinancialClassCode
	ENDIF 
ENDIF 
HL7MsgInValueArray[HL7InValueIndex] = icd10CodesReceived
HL7InValueIndex = HL7InValueIndex + 1
HL7MsgInValueArray[HL7InValueIndex] = sampleBillingType

'Added code to store customer practitioner code from HL7 inbound - by Akash on 04Sep2024
HL7InValueIndex = HL7InValueIndex + 1
IF (HL7Template = "IE_HL7_CLIA_INBOUND") THEN 
	custPractCode = ContextTranslate("{salesforceClientId}.{salesforceProviderId}") 
ENDIF 
HL7MsgInValueArray[HL7InValueIndex] = custPractCode

IF (HL7Template = "IE_HL7_CLIA_INBOUND") THEN 
	status = ClearArray("OBXInboundTemp1") 
	status = ClearArray("OBXInboundTemp2") 
	status = ClearArray("OBXInboundTemp3") 
	status = ClearArray("OBXInboundTemp4")  'Added on 29Jan2025
	status = ClearArray("OBXInboundTemp") 
	
	'Added code logic to handle when these optional fields are missed to add which breaks array join function - Added on 29Jan2025
	availableObx = UboundArray(OBXSetIDInbound, 1) 'Updated the logic and convert it to loop - By Akash on 04Oct2024
	IF (availableObx = 1) THEN
		'Initializing all obx fields 
		status = ClearArray("arrayObxFields") 
		obxFieldIncreamentIndex = 1
		arrayObxFields[obxFieldIncreamentIndex] = "OBXObservationIDInbound"
		obxFieldIncreamentIndex = obxFieldIncreamentIndex + 1
		arrayObxFields[obxFieldIncreamentIndex] = "OBXObservationTextInbound"
		obxFieldIncreamentIndex = obxFieldIncreamentIndex + 1
		arrayObxFields[obxFieldIncreamentIndex] = "OBXObsevationSubIDInbound"
		obxFieldIncreamentIndex = obxFieldIncreamentIndex + 1
		arrayObxFields[obxFieldIncreamentIndex] = "OBXObservationValueInbound"
		obxTotalFieldIndex = UBound(arrayObxFields, 1) 

		'looping thorugh all fields and set the initial field array if array has no index
		FOR obxFieldIndex = 1 TO obxTotalFieldIndex
			status = ClearArray("tempObxFieldArray") 
			arrayObxFieldName = arrayObxFields[obxFieldIndex]
			tempObxFieldArray = ArrayWithName(arrayObxFieldName) 
			'check whether the obx field has values if not inserting new one index to that array 
			tempObxIndex = Ubound(tempObxFieldArray, 1) 
			IF (tempObxIndex = 0) THEN
				status = ArrayInitialize(arrayObxFieldName, 1, 1, "") 
			ENDIF 
		NEXT 
	ENDIF 
	
	status = ArrayJoin(OBXSetIDInbound, OBXValueTypeInbound, "OBXInboundTemp1", "Column") 
	status = ArrayJoin(OBXInboundTemp1, OBXObservationIDInbound, "OBXInboundTemp2", "Column") 
	status = ArrayJoin(OBXInboundTemp2, OBXObservationTextInbound, "OBXInboundTemp3", "Column") 
	status = ArrayJoin(OBXInboundTemp3, OBXObsevationSubIDInbound, "OBXInboundTemp4", "Column")  'Added on 29Jan2025
	status = ArrayJoin(OBXInboundTemp4, OBXObservationValueInbound, "OBXInboundTemp", "Column")  'Updated on 29Jan2025

	totalOBXInbound = UBound(OBXInboundTemp, 1) 
	IF (totalOBXInbound > 0) THEN 
		status = ClearArray("base64ValuesArray") 
		indexBase64FilesCount = 0
		handle = HL7Parse(hl7String) 
		FOR indexInbound = 1 TO totalOBXInbound
			OBXInboundTemp[indexInbound,7] = orderNumber
			OBXInboundTemp[indexInbound,8] = DateTime() 
			OBXInboundTemp[indexInbound,9] = USER 
			OBXInboundTemp[indexInbound,10] = "T"
			OBXInboundTemp[indexInbound,11] = "F"
			OBXInboundTemp[indexInbound,12] = "CLIA"

			'Code to set the base64 string to the array for generating files - Added by Akash on 04Feb2024
			segmentValueType = OBXInboundTemp[indexInbound, 2]
			IF (segmentValueType = "ED") THEN 
				segmentIndex = OBXInboundTemp[indexInbound, 1]
				base64StringValue = HL7FieldFromSegment(handle, "OBX", segmentIndex, "Observation Value", , , ) 
				base64StringValue = StripChars(base64StringValue, Chr(13) & Chr(10) & " " ) 
				carrortIndex = Instr(base64StringValue,"^") 
				IF (carrortIndex > 0) THEN 
					base64StringValue = Left(base64StringValue,carrortIndex - 1) 
				ENDIF 
				base64StringValue = Trim(base64StringValue) 
				IF (NotEmpty(base64StringValue)) THEN 
					indexBase64FilesCount = indexBase64FilesCount + 1
					base64ValuesArray[indexBase64FilesCount] = base64StringValue
					OBXInboundTemp[indexInbound, 6] = base64StringValue
				ENDIF 
			ENDIF 
		NEXT

		OBXInboundTableName = "Z_HL7_INBOUND_DATA"
		OBXInboundFieldsArray[1] = "SEQ_NUM"
		OBXInboundFieldsArray[2] = "PLACER_FIELD_1"
		OBXInboundFieldsArray[3] = "PLACER_FIELD_2"
		OBXInboundFieldsArray[4] = "PLACER_FIELD_3"
		OBXInboundFieldsArray[5] = "PLACER_FIELD_4"
		OBXInboundFieldsArray[6] = "PLACER_FIELD_5"  'Added on 29Jan2025
		OBXInboundFieldsArray[7] = "EXTERNAL_KEY"
		OBXInboundFieldsArray[8] = "CHANGED_ON"
		OBXInboundFieldsArray[9] = "CHANGED_BY"
		OBXInboundFieldsArray[10] = "ACTIVE"
		OBXInboundFieldsArray[11] = "REMOVED"
		OBXInboundFieldsArray[12] = "GROUP_NAME"
		status = BulkInsert(OBXInboundTableName, OBXInboundFieldsArray, OBXInboundTemp,) 	
	ENDIF
	
	'Code to set the base64 string to the array for generating files - Added by Akash on 04Feb2024
	IF (indexBase64FilesCount > 0) THEN 
		finalFileName = ""
		filesCount = indexBase64FilesCount
		base64FilesFolderPath = GetConstant("HL7_OBX_BASE64_FILES_PATH")
		folderName = ContextTranslate("{orderNumber}_{sendingfacilityname}")
		GOSUB HL7_OBX_BASE64_FILES_GENERATE

		'FinalFileName is the variable which is having the base64 comnverted files
		IF (IsEmpty(finalFileName)) THEN
			errorMessage = ContextTranslate(" OBX Base 64file generation failed please check rpt.log for more information orderNumber: {folderName}")
			logNumber = CreateLIMSLog(message, , , "REPORT", , ) 
		ELSE 
			'FinalFile is placed in the data base and db file is stored in the table
			status = ClearArray("dbFieldsArray") 
			status = ClearArray("dbValuesArray") 
			dateString = StripChars(Str(Date()), ":\/ ")
			dbDirectoryPath = ContextTranslate("HL7\OBX Base64 Files\{dateString}") 
			dbFieldsArray[1] = "DESCRIPTION"
			dbValuesArray[1] = folderName
			base64DbFileName = PutDBFile(finalFileName, dbDirectoryPath, dbFieldsArray, dbValuesArray, "T") 
			processedObxFolder = ContextTranslate("{base64FilesFolderPath}Processed\") 
			IF (Not(DirExists(processedObxFolder))) THEN 
				status = DirNew(processedObxFolder, "T") 
			ENDIF 
			processedObxFilesPath = ContextTranslate("{processedObxFolder}{folderName}_{dateTimeString}{fileObxExtention}") 
			status = FileCopy(finalFileName, processedObxFilesPath) 
			status = FileKill(finalFileName) 
		ENDIF 
	ENDIF 
ENDIF
'Setting the obx base64 file's db file name in table
HL7InValueIndex = HL7InValueIndex + 1
HL7MsgInValueArray[HL7InValueIndex] = base64DbFileName

RETURN
====== Subroutine HL7_IN_INITIAL_ADDITIONAL Ends here ===
====== Subroutine DATE_FROM_YMDHMS Starts here ===
'----           Name:   DATE_FROM_YMDHMS
'----       Function:   Convert to date from YYYYMMDDHHMMSS format
'----
'----       INPUTS:
'----            Context:
'----                dateYMDHMSString
'----            Variables (incl global)
'----                None 
'----
'----       OUTPUTS:
'----            Context:
'----                None
'----            Variables (incl global)
'----                outputDate - may be a Date or DateTime
'----
'----    Caveats:
'----        If Length of input string is 8 characters - get date portion only.
'----        Otherwise, also get time portion
'----
'----    Revisions:
'----
'----    Number   Date                          Author                         Reason
'----       1             18-Jun-2008           Susan                          Initial Configuration

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Check input string length
'If length 8 - convert to date
'If length 14 - convert to dateTime
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
dateStringLength = Len(dateYMDHMSString)

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Convert string to Date or DateTime
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
dateString = Left(dateYMDHMSString, 4) + "/" + Mid(dateYMDHMSString, 5, 2) + "/" + Mid(dateYMDHMSString, 7, 2)
outputDate = CvDate(dateString, "YMD") 

IF (dateStringLength > 8) THEN
    hourString = Mid(dateYMDHMSString, 9, 2)
    minutesString = Mid(dateYMDHMSString, 11, 2)
    secondsString = Mid(dateYMDHMSString, 13, 2)

    dateTimeString = str(outputDate) + " " + hourString + ":" + minutesString + ":" + secondsString
    outputDate = CVDateTime(dateTimeString)
ENDIF

return
====== Subroutine DATE_FROM_YMDHMS Ends here ===
====== Subroutine FN_INSERT_NEW_ZIPCODE Starts here ===
declare routineName
routineName = "FN_INSERT_NEW_ZIPCODE"
' ====================================================================================
' Abstract: Generic routine  to insert a zipcode
'
'
' Inputs:
' Context:
'
' Variables (inc global): calledFromScheduler
'
' Outputs:
' Context:
'
' Variables:
'
'
' Change History:
' Date                      Name                                Reason
' 14-Nov-2024       Augustin Raja                Initial_version
' 25-Nov-2024      Akash            					Added condition to gather countrycode/ countryname and assign variable to null if get from calling subroutine
'03-Jan-2025       Augustin Raja                  state code and state name taken from t_zipcode table but now its taken from list table
' ====================================================================================
status = ClearArray("zipcodeVariables") 

zipcodeVariables[1] = "countryName"
zipcodeVariables[2] = "countryCode"
zipcodeVariables[3] = "stateName"
zipcodeVariables[4] = "stateCode"
zipcodeVariables[5] = "statefips"
zipcodeVariables[6] = "countyCode"
zipcodeVariables[7] = "countyfips"
zipcodeVariables[8] = "countyOriginal"
zipcodeVariables[9] = "city"
zipcodeVariables[10] = "areacode"
zipcodeVariables[11] = "latitude"
zipcodeVariables[12] = "longitude"
zipcodeVariables[13] = "msa"
zipcodeVariables[14] = "timezone"
zipcodeVariables[15] = "gzipcodeVariablesmtoffset"

'Extracting variable values and set to null if not present
FOR indexZipcodeVariables = 1 TO 15   
	zipcodeVariableName = zipcodeVariables[indexZipcodeVariables]
	tempZipcodeVariableValue = VarValue(zipcodeVariableName) 
	IF (tempZipcodeVariableValue = ERROR OR IsEmpty(tempZipcodeVariableValue) OR Ucase(tempZipcodeVariableValue) = Ucase(zipcodeVariableName)) THEN 
		status = SetVariable(zipcodeVariableName, "") 
	ENDIF 
NEXT 

' Check if the zipcode exists
zipQuery = "SELECT zipcode FROM t_zipcode WHERE zipcode = '" & zipcode & "' AND removed = 'F'"
status = SQL(zipQuery, "zipFinds")
found = zipFinds[1,1]

ClearArray("zipFieldNames")
ClearArray("zipFieldValues")
ClearArray("zipKeyFields")
ClearArray("zipKeyValues")

' Key Fields
zipKeyFields[1] = "ZIPCODE"
zipKeyValues[1] = zipcode

zipTable = "T_ZIPCODE"
zipAuditReason = "Inserting new ZIP code into the T_ZIPCODE table: " & zipcode

' If zipcode is not found, proceed to insert
IF (IsEmpty(found)) THEN
	' Handle different scenarios
	IF (IsEmpty(stateCode) AND IsEmpty(stateName)) THEN
		' Both state_code and state_name do not exist, do nothing
	ELSEIF (NotEmpty(stateCode) AND IsEmpty(stateName)) THEN
		' state_code exists, fetch corresponding state_name   'By Augustin Raja 03-Jan-2025
		stateQuery = "SELECT DISTINCT value FROM list_entry WHERE list = 'STATES' AND Name ='" & stateCode & "'" 
		' 		stateQuery = "SELECT DISTINCT state FROM t_zipcode WHERE state_code = '" & stateCode & "'"
		status = SQL(stateQuery, "stateNames")
		stateName = stateNames[1, 1]
	ELSEIF (NotEmpty(stateName) AND IsEmpty(stateCode)) THEN
		' state_name exists, fetch corresponding state_code   'By Augustin Raja 03-Jan-2025
		stateQuery = "SELECT DISTINCT Name FROM list_entry WHERE list = 'STATES'AND Value = '"  & stateName & "'" 
		' 		stateQuery = "SELECT DISTINCT state_code FROM t_zipcode WHERE state = '" & stateName & "'"
		status = SQL(stateQuery, "stateCodes")
		stateCode = stateCodes[1, 1]
	ELSE
		' Both state_code and state_name exist, do nothing
	ENDIF 
	
	' Handle different scenarios
	IF (IsEmpty(countryCode) AND IsEmpty(countryName)) THEN
		' Both country_code and country_name do not exist, do nothing
	ELSEIF (NotEmpty(countryCode) AND IsEmpty(countryName)) THEN
		'country_code exists, fetch corresponding country_name
		countryQuery = "SELECT DISTINCT value FROM list_entry WHERE list = 'COUNTRY' AND name = UPPER('" & countryCode & "')"
		status = SQL(countryQuery, "countryNames")
		countryName = countryNames[1, 1]
	ELSEIF (NotEmpty(countryName) AND IsEmpty(countryCode)) THEN
		' country_name exists, fetch corresponding country_code
		countryQuery = "SELECT DISTINCT name FROM list_entry WHERE list = 'COUNTRY' AND value = UPPER('" & countryName & "')"
		status = SQL(countryQuery, "countryCodes")
		countryCode = countryCodes[1, 1]
	ELSE
		' Both country_code and country_name exist, make it in upper case
		countryName = Ucase(countryName) 
		countryCode = Ucase(countryCode)
	ENDIF 

	' Field Names
	zipFieldNames[1] = "COUNTRY_NAME"
	zipFieldNames[2] = "COUNTRY_CODE"
	zipFieldNames[3] = "STATE"
	zipFieldNames[4] = "STATE_CODE"
	zipFieldNames[5] = "STATEFIPS"
	zipFieldNames[6] = "COUNTY_CODE"
	zipFieldNames[7] = "COUNTYFIPS"
	zipFieldNames[8] = "COUNTY_ORIGINAL"
	zipFieldNames[9] = "CITY_NAME"
	zipFieldNames[10] = "CITYTYPE"
	zipFieldNames[11] = "AREACODE"
	zipFieldNames[12] = "LATITUDE"
	zipFieldNames[13] = "LONGITUDE"
	zipFieldNames[14] = "MSA"
	zipFieldNames[15] = "TIMEZONE"
	zipFieldNames[16] = "GMTOFFSET"
	zipFieldNames[17] = "DST"
	zipFieldNames[18] = "ZIPCODETYPE"
	zipFieldNames[19] = "DESCRIPTION"
	zipFieldNames[20] = "GROUP_NAME"

	' Set values
	zipFieldValues[1] = countryName
	zipFieldValues[2] = countryCode
	zipFieldValues[3] = stateName
	zipFieldValues[4] = stateCode
	zipFieldValues[5] = statefips
	zipFieldValues[6] = countyCode
	zipFieldValues[7] = countyfips
	zipFieldValues[8] = countyOriginal
	zipFieldValues[9] = city
	zipFieldValues[10] = "D"    ' Assuming "D" stands for a default or placeholder type
	zipFieldValues[11] = areacode
	zipFieldValues[12] = latitude
	zipFieldValues[13] = longitude
	zipFieldValues[14] = msa
	zipFieldValues[15] = timezone
	zipFieldValues[16] = gmtoffset
	zipFieldValues[17] = "Y"    ' Assuming "Y" for DST being active
	zipFieldValues[18] = "S"    ' Assuming "S" stands for standard zip code type
	zipFieldValues[19] = city & ", " & stateCode & " " & zipcode
	zipFieldValues[20] = "DEFAULT"    ' Group name default

	status = InsertTable(zipTable, zipKeyFields, zipKeyValues, zipFieldNames, zipFieldValues, zipAuditReason, , "T")

	IF (Not(status)) THEN
		message = "Failed to insert Zipcode"+ zipcode  + CHR(13) + CHR(10) + "Last Error: " + lasterror
		logNumber = CreateLIMSLog(message, zipTable, zipcode, "GENERAL") 
	ENDIF
ELSE
	'Do Nothing
ENDIF
 
RETURN
====== Subroutine FN_INSERT_NEW_ZIPCODE Ends here ===
====== Subroutine HL7_CREATE_REQUISITION_FORM Starts here ===
declare routineName
routineName = "HL7_CREATE_REQUISITION_FORM"
' ====================================================================================
' Abstract: This subroutine is responsible for creating the requisition form for HL7 orders
'        
'
' Inputs:
'   Context:
'        
'   Variables (inc global):
'        
' Outputs:
'   Context:
'        
'   Variables:
'        
'
' Change History:
' Date						By							Reason
' 13-Dec-2022		ARUN TYAGI		Initial_version
' 23-Feb-2024		ARUN TYAGI		Updated query to add facility table
' 05-Sep-2024		Akash					Updated argument to generation requisition form
' ====================================================================================

'Changed by Arun on Feb 23, 2024
qryReqFile = "select  HL7facilityDetails.HL7_REQ_FILE_PATH, HL7facilityDetails.REQUISITION_REPORT_TAG, HL7facilityDetails.DESCRIPTION, facility.Z_HL7_CUST_PRACT_CODE  from HL7_FACILITY_DETAILS HL7facilityDetails "
qryReqFile = qryReqFile & " join FACILITY facility on facility.Z_HL7_FACILITY_DETAILS =  HL7facilityDetails.ENTRY_NAME where facility.Z_SENDING_APPLICATION = '{sendingapplicationname}'"
qryReqFile = ContextTranslate(qryReqFile) 
status = SQL(qryReqFile, "arrayreqFile", , , , , , , ) 
reqFilePath = arrayreqFile[1,1]
reportName = arrayreqFile[1,2]
facilityName = arrayreqFile[1,3]
custPractCode = arrayreqFile [1, 4]
outputFile = reqFilePath & orderNumber & ".pdf"

IF (Not(IsEmpty(reportName) )  OR Not(IsNull(reportName) ) ) THEN 

	'Commented by Akash on 05Sep2024
	' 	fieldsArray[1] = "@sendingApplication"
	' 	fieldsArray[2] = "@sendingFacility"
	' 	fieldsArray[3] = "@messageReceivedDateTime"
	' 	fieldsArray[4] = "@countryCode"
	' 	fieldsArray[5] = "@patientId"
	' 	fieldsArray[6] = "@lastName"
	' 	fieldsArray[7] = "@firstName"
	' 	fieldsArray[8] = "@dob"
	' 	fieldsArray[9] = "@gender"
	' 	fieldsArray[10] = "@orderNumber"
	' 	fieldsArray[11] = "@sampledDate"
	' 	fieldsArray[12] = "@testName"

	' 	valuesArray[1] = sendingApplicationName
	' 	valuesArray[2] = sendingfacilityname
	' 	valuesArray[3] = messageReceivedDateTime
	' 	valuesArray[4] = countryCode
	' 	valuesArray[5] = patientId
	' 	valuesArray[6] = lastName
	' 	valuesArray[7] = firstName
	' 	valuesArray[8] = dob
	' 	valuesArray[9] = gender
	' 	valuesArray[10] = orderNumber
	' 	valuesArray[11] = sampledDateString
	' 	valuesArray[12] = testNameStr

	'Updating the arguments for generating the report - by Akash on 05Sep2024
	'Initializing variables 
	rcins1CarrierName = "" ' From insuranceCompanyName[1]		arrayInsuranceDetails[1,3]
	rcins1CarrierPhone = "" ' From insurancePhoneNumber[1]			
	rcins1PolicyHolderName = "" 'From insuranceInsuredFamilyname[1]	
	rcins1RelationshipToInsured = "" ' From insuranceInsuredRelation[1]
	rcins1PolicyHolderDOB = "" ' From insuranceInsuredDob[1]
	rcins1InsuredID = "" ' From insurancePolicyNumber[1]	arrayInsuranceDetails[1, 12]
	rcins1Group = "" ' From insuranceGroupNumber[1]	arrayInsuranceDetails[1, 10]
	rcins1Type = "" ' From insuranceType[1] arrayInsuranceDetails[1, 11]
	rcins2CarrierName = "" ' From insuranceCompanyName[2]
	rcins2PolicyHolderName = "" 'From insuranceInsuredFamilyname[2]
	rcins2InsuredID = "" ' From insurancePolicyNumber[2]
	rcsalesforceClientId  = "" ' From salesForceClientId for IE and DB for Healius
	rcclientInsitutionName = "" ' From assignedPatientLocFacility for IE and DB for Healius
	rcproviderFirstName = "" ' From attendingDoctorFirstName for IE and DB for Healius
	rcproviderLastName = "" ' From attendingDoctorLastName for IE and DB for Healius
	rcproviderNPI = "" ' From attendingDoctorNPI for IE and DB for Healius
	rcicd10code1 = "" ' From DG1DiagnosisCode[1]
	rcicd10code2 = "" ' From DG1DiagnosisCode[2]
	rcicd10code3 = "" ' From DG1DiagnosisCode[3]
	rcicd10code4 = "" ' From DG1DiagnosisCode[4]
	rcicd10code5 = "" ' From DG1DiagnosisCode[5]
	rcicd10code6 = "" ' From DG1DiagnosisCode[6]

	'Getting InsuranceDetails from InsuranceVariables
	numberOfInsurace = UBound(arrayInsuranceDetails, 1) 
	IF (numberOfInsurace > 0) THEN 
		FOR insuranceIndex = 1 TO numberOfInsurace
			insuranceVariableName = ContextTranslate("rcins{insuranceIndex}CarrierName") 
			insuranceVariableValue = arrayInsuranceDetails[insuranceIndex,3]
			status = SetVariable(insuranceVariableName, insuranceVariableValue) 
			
			insuranceVariableName = ContextTranslate("rcins{insuranceIndex}CarrierPhone") 
			insuranceVariableValue = insurancePhoneNumber[insuranceIndex]
			IF (NotEmpty(insuranceVariableValue)) THEN 
				status = SetVariable(insuranceVariableName, insuranceVariableValue) 
			ENDIF 
			
			insuranceVariableName = ContextTranslate("rcins{insuranceIndex}PolicyHolderName") 
			insuranceVariableValue = insuranceInsuredFamilyname[insuranceIndex]
			IF (insuranceVariableValue = lastName) THEN 
				insuranceVariableValue = ""
			ENDIF 
			IF (NotEmpty(insuranceVariableValue)) THEN 
				status = SetVariable(insuranceVariableName, insuranceVariableValue) 
			ENDIF 
			
			insuranceVariableName = ContextTranslate("rcins{insuranceIndex}RelationshipToInsured") 
			insuranceVariableValue = insuranceInsuredRelation[insuranceIndex]
			IF (NotEmpty(insuranceVariableValue)) THEN 
				status = SetVariable(insuranceVariableName, insuranceVariableValue) 
			ENDIF 

			insuranceVariableName = ContextTranslate("rcins{insuranceIndex}PolicyHolderDOB") 
			insuranceVariableValue = insuranceInsuredDob[insuranceIndex]
			IF (NotEmpty(insuranceVariableValue)) OR (Not(IsNull(insuranceVariableValue))) THEN 
				dateYMDHMSString = insuranceVariableValue
				GOSUB DATE_FROM_YMDHMS
				insuranceVariableValue = outputDate
				status = SetVariable(insuranceVariableName, insuranceVariableValue) 
			ENDIF 

			insuranceVariableName = ContextTranslate("rcins{insuranceIndex}InsuredID") 
			insuranceVariableValue = arrayInsuranceDetails[insuranceIndex, 12]
			status = SetVariable(insuranceVariableName, insuranceVariableValue) 

			insuranceVariableName = ContextTranslate("rcins{insuranceIndex}Group") 
			insuranceVariableValue = arrayInsuranceDetails[insuranceIndex,10]
			status = SetVariable(insuranceVariableName, insuranceVariableValue) 

			insuranceVariableName = ContextTranslate("rcins{insuranceIndex}Type") 
			insuranceVariableValue = arrayInsuranceDetails[insuranceIndex, 11]
			status = SetVariable(insuranceVariableName, insuranceVariableValue) 
		NEXT 
	ENDIF 
	
	'Getting Client and Physician information from DB for non-IE
	IF (HL7Template = "IE_HL7_CLIA_INBOUND") THEN 
		rcsalesforceClientId  = salesforceClientId
		rcclientInsitutionName = clientFacilityName
		rcproviderFirstName = attendingDoctorFirstName
		rcproviderLastName = attendingDoctorLastName 
		rcproviderNPI = attendingDoctorNPI
	ELSE 
		queryClientPhycianDetails = " select c.NAME, c.COMPANY_NAME, p.FIRST_NAME, p.LAST_NAME, p.T_NPI from T_CUST_PRACTITIONER tcp join CUSTOMER c ON tcp.CUSTOMER = c.NAME "
		queryClientPhycianDetails = queryClientPhycianDetails & " join PRACTITIONER p ON tcp.PRACTITIONER = p.NAME where tcp.CUSTOMER =  split_part('{custPractCode}', '.', 1) AND tcp.PRACTITIONER = split_part('{custPractCode}', '.', 2) "
		queryClientPhycianDetails = ContextTranslateSQL(queryClientPhycianDetails) 
		status = SQL(queryClientPhycianDetails, "arrayClientPhycianDetails") 
		rcsalesforceClientId  = arrayClientPhycianDetails[1, 1]
		rcclientInsitutionName = arrayClientPhycianDetails[1, 2] 
		rcproviderFirstName = arrayClientPhycianDetails[1, 3] 
		rcproviderLastName = arrayClientPhycianDetails[1, 4]
		rcproviderNPI = arrayClientPhycianDetails[1, 5]
		'Set the test code to null value when variabe is empty
		IF (IsEmpty(testCodeStr)) THEN 
			testCodeStr = ""
		ENDIF 
	ENDIF 
	
	'getting icd10CodeValues from DG1DiagnosisCode variable
	numberOfIcdCodes = UBound(DG1DiagnosisCode, 1) 
	IF (numberOfIcdCodes > 0) THEN 
	FOR indexIcdCodes = 1 TO numberOfIcdCodes
			icdCodeVariableName = ContextTranslate("rcicd10code{indexIcdCodes}") 
			icdCodeVariableValue = DG1DiagnosisCode[insuranceIndex]
			status = SetVariable(icdCodeVariableName, icdCodeVariableValue) 
		NEXT 
	ENDIF 

	'Converting Date to default value if not avaialable
	rcmessageReceivedDateTime = messageReceivedDateTime
	rcdob = dob
	rcsampledDate = sampledDateString
	IF (IsNull(rcsampledDate) OR IsEmpty(rcsampledDate)) THEN 
		rcsampledDate = "10/10/1900"
	ENDIF 
	IF (IsNull(rcdob) OR IsEmpty(rcdob)) THEN 
		rcdob = "10/10/1900"
	ENDIF 
	IF (IsNull(rcmessageReceivedDateTime) OR IsEmpty(rcmessageReceivedDateTime)) THEN 
		rcmessageReceivedDateTime = "10/10/1900"
	ENDIF 
	IF (IsNull(rcins1PolicyHolderDOB) OR IsEmpty(rcins1PolicyHolderDOB)) THEN 
		rcins1PolicyHolderDOB = "10/10/1900"
	ENDIF 

	increamentIndex = 0
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcSendingApplication"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcSendingFacility"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcDateTimeMessageSent"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcCountry"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcPatientFirstName"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcPatientLastName"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcPatientMiddleName"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcPatientBirthDate"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcPatientPhone"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcPatientAddress"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcPatientCity"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcPatientState"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcPatientZipCode"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcPatientSex"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcPatientRace"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcPatientEthnicity"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcpatientMRN"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcExternalPatientID"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcBilling"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcResponsiblePartyFirstName"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcResponsiblePartyLastName"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcRelationshipToPatient"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcResponsiblePartyAddress1"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcResponsiblePartyAddress2"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcResponsiblePartyCity"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcResponsiblePartyState"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcResponsiblePartyZipCode"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcINS1NameOfPrimaryInsuranceCarrier"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcINS1InsuranceCarrierPhone"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcINS1PolicyHolderName"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcINS1RelationshipToInsured"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcINS1PolicyHolderDOB"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcINS1InsuredID"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcINS1Group"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcINS1InsuranceType"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcINS2NameOfSecondaryInsuranceCarrier"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcINS2PolicyHolderName"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcINS2SecondaryInsuranceID"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcClientAccountNumber"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcClientName"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcProviderFirstName"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcProviderLastName"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcProviderNPI"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcICD10Code1"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcICD10Code2"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcICD10Code3"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcICD10Code4"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcICD10Code5"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcICD10Code6"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcTestCode"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcTestOrdered"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcOrderID"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcTubeID1"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcTubeID2"
	increamentIndex = increamentIndex + 1
	fieldsArray[increamentIndex] = "@rcSampleCollectionDateTime"

	increamentIndex = 0
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = sendingapplicationname
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = sendingfacilityname
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcmessageReceivedDateTime
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = countryCode
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = firstName
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = lastName
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = middleName
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcdob
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = patientHomePhone
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = patientAddress1
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = patientCity
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = patientState
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = patientZipPostalCode
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = gender
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = patientRace
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = patientEthnicGroup
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = patientID
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = patientAccountNumber
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = pv1FinancialClassCode
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = guarantorFirstName
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = guarantorLastName
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = guarantorRelationship
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = guarantorAddress1
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = guarantorAddress2
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = guarantorCityName
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = guarantorStateName
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = guarantorZIPCode
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcins1CarrierName
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcins1CarrierPhone
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcins1PolicyHolderName
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcins1RelationshipToInsured
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcins1PolicyHolderDOB
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcins1InsuredID
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcins1Group
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcins1Type
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcins2CarrierName
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcins2PolicyHolderName
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcins2InsuredID
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcsalesforceClientId 
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcclientInsitutionName
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcproviderFirstName
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcproviderLastName
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcproviderNPI
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcicd10code1
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcicd10code2
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcicd10code3
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcicd10code4
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcicd10code5
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcicd10code6
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = testCodeStr
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = testNameStr
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = orderNumber
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = tube1Accession
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = tube2Accession
	increamentIndex = increamentIndex + 1
	valuesArray[increamentIndex] = rcsampledDate

	IF (FileExists(outputFile) ) THEN 
		status = FileKill(outputFile, ) 
	ENDIF

	status = RunReport(reportName,fieldsArray,valuesArray,outputFile) 

	dbFileName = ""
	IF (Not(status)) THEN
		errorMessage = ContextTranslate(" Requsition form generation failed please check rpt.log for more information orderNumber: {orderNumber}")
		logNumber = CreateLIMSLog(message, , , "REPORT", , ) 
	ELSE 
		dbFieldsArray[1] = "DESCRIPTION"
		dbValuesArray[1] = orderNumber
		dbFileName = PutDBFile(outputFile, "HL7", dbFieldsArray, dbValuesArray, "T") 
	ENDIF 
	
ENDIF
RETURN
====== Subroutine HL7_CREATE_REQUISITION_FORM Ends here ===
====== Subroutine D Starts here ===
// Subroutine not found in database
====== Subroutine D Ends here ===
====== Subroutine HL7_OBX_BASE64_FILES_GENERATE Starts here ===
declare routineName
routineName = "HL7_OBX_BASE64_FILES_GENERATE"
' ====================================================================================
' Abstract: This subroutine is used to generate the files for OBX segment that comes in as base64 encoded string
'        
'
' Inputs:
'   Context:  
'
'   Variables (inc global):
' 	filesCount - no of files count
' 	base64FilesFolderPath - path for generating base64 files
' 	folderName - name to set for the finalfile
'       
' Outputs:
'   Context:
'        
'   Variables:
'           finalFileName - send the final file to the calling subroutine
'
' Change History:
' Date									By						   Reason
'04-Feb-2025					Akash					 Initial Version
' ====================================================================================
'inputFileName - Where the base64 contents are read from
'placeFilesDirectory - Path to the directory where we are going to place the file
dateTimeString = StripChars(Str(DateTime()), ":\/ ") 
fileObxExtention = ""
placeFilesDirectory =ContextTranslate("{base64FilesFolderPath}{folderName}")
inputFileName = ContextTranslate("{placeFilesDirectory}_{dateTimeString}.txt") 

'If the directory already not exists creating new else delete and create new
IF (Not(DirExists(placeFilesDirectory))) THEN 
	status = DirNew(placeFilesDirectory, "T") 
ELSE 
	shellCommandType = "RemoveDirectory"
	'directoryName - directoty with location to be removed
	directoryName = placeFilesDirectory
	GOSUB FN_SHELL_COMMANDS
	status = DirNew(placeFilesDirectory, "T") 
ENDIF 	

'Creating the text input file containing all base64 strings
base64Contents = ArrayToCSVString(base64ValuesArray, Chr(13)) 	
base64Contents = Trim(base64Contents) 
status = FileOpen(inputFileName) 
status = FileWrite(inputFileName, base64Contents, "T") 
status = FileClose(inputFileName)

'Calling the shell subroutine with type as base64 to generate base64 fies with the inputs
shellCommandType = "decodeBase64ToFile"
GOSUB FN_SHELL_COMMANDS
status = FileKill(inputFileName, ) 

'File count that is in base64 format is only one the output the final file as that one file or esle zip all files to give final file
IF (filesCount = 1) THEN
	status = DirFiles(placeFilesDirectory, "*", "returnFilesArray", ) 
	filesInDirectory = UBound(returnFilesArray, 1) 	
	IF (filesInDirectory = 0) THEN
		RETURN 
	ELSE 
		tempFileName = Trim(returnFilesArray[1, 1])
		oldObxFile =	ContextTranslate("{placeFilesDirectory}\{tempFileName}") 
		fileObxExtention =  Trim(Mid(tempFileName,Instr(tempFileName,"."),Len(tempFileName)))
		newObxFile = ContextTranslate("{base64FilesFolderPath}{folderName}{fileObxExtention}") 
		status = FileCopy(oldObxFile,newObxFile) 
		finalFileName = newObxFile
	ENDIF 
ELSE 
	fileObxExtention = ".zip"
	zipName = ContextTranslate("{placeFilesDirectory}{fileObxExtention}") 
	status = DirZip(placeFilesDirectory, zipName,"T","T") 
	finalFileName = zipName
ENDIF 

shellCommandType = "RemoveDirectory"
'directoryName - directoty with location to be removed
directoryName = placeFilesDirectory
GOSUB FN_SHELL_COMMANDS

RETURN
====== Subroutine HL7_OBX_BASE64_FILES_GENERATE Ends here ===
====== Subroutine PATIENT_ITEM_MEDREC Starts here ===
'----       Subroutine:   PATIENT_ITEM_MEDREC
'----       Function:   Patient Item Table - Create or Update Medical Record Number
'----							Called from Demo Data Entry or HL7 In Process Order (possibly other places, too)
'----							Expect this to be called Posted - so there is a commit in here.
'----
'----       INPUTS:
'----            Context:
'----
'----            Variables (incl global)
'----               sampleMedRecNum or orderMedRecNum or patientMedRecNum
'----				patientLIMS or samplePatient
'----				submitterLIMS or sampleCustomer			
'----				auditReason
'----               sampleMedRecNum2 or orderMedRecNum2 or patientMedRecNum2 - (ssn - patient table field)
'----       OUTPUTS:
'----            Context:
'----                None
'----            Variables (incl global)
'----                None 
'----
'----    Caveats:
'----                Calling routine responsible for non-empty input variables
'----
'----    Revisions:
'----
'---- Date                   Author                              Details
'---- 06-Jun-2018    Susan Goodhart            CHT0037-014: Update for Patient Item - Medical Record Number.  Move to this posted subroutine to ensure commit on Patient Item 
'---- 02-May-2019    Susan Epstein         T3179SG Allow input variable of sampleMedRecNum or orderMedRecNum or patientMedRecNum
'---- 24-Oct-2024   	Akash         				Allow input variable sampleMedRecNum2 or orderMedRecNum2 or patientMedRecNum2

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Initialize Variables
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Declare patientName customerName
Declare patientItemTable patientOldMedReq patientMedReqSeqNum patientOldMedReq2 
Declare patientItemFieldsArray[], patientItemValuesArray[], tempArray[]

IF (NOT(IsEmpty(patientLIMS))) THEN
	patientName = patientLIMS
ELSEIF (NOT(IsEmpty(samplePatient))) THEN
	patientName = samplePatient
ENDIF 

IF (NOT(IsEmpty(submitterLIMS))) THEN
	customerName = submitterLIMS
ELSEIF (NOT(IsEmpty(sampleCustomer))) THEN
	customerName = sampleCustomer
ENDIF 

IF (IsEmpty(patientMedRecNum)) THEN
	IF (NOT(IsEmpty(sampleMedRecNum))) THEN
		patientMedRecNum = sampleMedRecNum 
	ELSEIF (NOT(IsEmpty(orderMedRecNum))) THEN
		patientMedRecNum = orderMedRecNum
	ENDIF 
ENDIF

IF (IsEmpty(patientMedRecNum2)) THEN 'Added by AKash on 24Oct2024
	IF (NOT(IsEmpty(sampleMedRecNum2))) THEN
		patientMedRecNum2 = sampleMedRecNum2
	ELSEIF (NOT(IsEmpty(orderMedRecNum2))) THEN
		patientMedRecNum2 = orderMedRecNum2
	ENDIF 
ENDIF 

' IF ((IsEmpty(patientMedRecNum)) OR (IsEmpty(patientName)) OR (IsEmpty(customerName)) OR (IsEmpty(auditReason))) THEN 'Commented by AKash on 24Oct2024
IF (((IsEmpty(patientMedRecNum)) AND (IsEmpty(patientMedRecNum2))) OR (IsEmpty(patientName)) OR (IsEmpty(customerName)) OR (IsEmpty(auditReason))) THEN 'Updated by AKash on 24Oct2024
	RETURN 
ENDIF

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Insert or Update the Patient Medical Record Number
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
' query = "select seq_num, medical_record_num from t_patient_med_recs where patient = '{patientName}' "
query = "select seq_num, medical_record_num, medical_record_num2 from t_patient_med_recs where patient = '{patientName}' "  'Updated by AKash on 24Oct2024
query = query + " and customer = '{customerName}' "
query = ContextTranslateSQL(query) 
status = SQL(query, "tempArray",  , "F", )
patientMedReqSeqNum = tempArray[1, 1]
patientOldMedReq = tempArray[1, 2]
patientOldMedReq2 = tempArray[1, 3] 'Added by AKash on 24Oct2024

patientItemTable = "T_PATIENT_MED_RECS"
status = SetAuditReason(auditReason, "PATIENT")

IF (IsEmpty(patientMedReqSeqNum)) THEN
	status = ClearArray("patientItemFieldsArray")
	status = ClearArray("patientItemValuesArray")

	patientItemFieldsArray[1] = "CUSTOMER"
	patientItemFieldsArray[2] = "MEDICAL_RECORD_NUM"
	patientItemFieldsArray[3] = "MEDICAL_RECORD_NUM2" 'Added by AKash on 24Oct2024

	patientItemValuesArray[1] = customerName
	patientItemValuesArray[2] = patientMedRecNum
	patientItemValuesArray[3] = patientMedRecNum2 'Added by AKash on 24Oct2024

	status = AddPatientItem(patientName, patientItemTable, patientItemFieldsArray, patientItemValuesArray)
	save()
ELSE
	IF ((patientOldMedReq <> patientMedRecNum) AND (Not(IsEmpty(patientMedRecNum)))) THEN
		status = UpdatePatientItemFld(patientName, patientItemTable, patientMedReqSeqNum, "MEDICAL_RECORD_NUM", patientMedRecNum, "T")
	ENDIF 
	'Added new field to store the MRN2 number for that patient
	IF ((patientOldMedReq2 <> patientMedRecNum2) AND (Not(IsEmpty(patientMedRecNum2)))) THEN  'Added by AKash on 24Oct2024
		status = UpdatePatientItemFld(patientName, patientItemTable, patientMedReqSeqNum, "MEDICAL_RECORD_NUM2", patientMedRecNum2, "T")
	ENDIF 
ENDIF
status = ResetAuditReason("PATIENT")

return
====== Subroutine PATIENT_ITEM_MEDREC Ends here ===
====== Subroutine HL7_PARSE_MSG Starts here ===
'----       Subroutine:   HL7_PARSE_MSG
'----       Function:   Generic routine to parse and HL7 Message based on an HL7 Template
'----
'----       INPUTS:
'----            Context:
'----
'----            Variables (incl global)
'----                HL7Template - the HL7 Template to use for parsing.
'----                HL7String - this string will be slightly modified in this routine for parsing requirements
'----                displayHL7Message - if true, then populate arrays for displaying the message (Sub UTILITY_HL7_DISPLAY)
'----
'----       OUTPUTS:
'----            Context:
'----                None
'----            Variables (incl global)
'----                The variables in the HL7 Template table will be populated
'----                For repeating segments, these will be arrays, with one row in the array per repeat segment
'----                fieldValidationErrorArray, fieldValidationHeaderArray, fieldValidationErrorString
'----                msgToTemplateMapArray - Col 1: Segement, Col2: Message Segement Index, Col3:  Template Segment Index 
'----				elementRepeatMapArray - Cols 1-6: Segment, Msg Segment Index, Template Segment Index, Element Name, Msg Element Index, Template Element Index
'----
'----
'----    Caveats:
'----                Fields will be validated if the HL7 Template has Mapped Table and Mapped Field specified.
'----                    Will only validate on single key tables or lists.
'----                When matching message segments to template segments, dates are not compared
'----            Variables created will be created as named in HL7 Template and variableNameQuoteFixed, fieldValueQuoteFixedUpper
'----               i.e. lastName = "O'Grady" and lastNameQuoteFixed = "O''Grady" and lastNameQuoteFixedUpper = "O''GRADY"
'----
'----    Revisions:
'----
'---- Date                   Author                              Details
'---- 18-Jun-2008    Susan Goodhart         Initial configuration
'----  23-Jun-2009      Susan Goodhart        Use updated HL7FieldFromSegment function to get component, subcomponent, Repeat Elements
'----                                                                      Zip - only truncate to 5 if first char is numeric (Canadian are 6 places, remove spaces)
'----                                                                       Data Type may come from component or element
'---- 19-Jul-2009       Stan Ingold                  added logic for index_number
'---- 07-Dec-2011      Stan Ingold                  add code to build fieldValidationErrorLocationArray
'---- 24-Feb-2012      Susan                          date error trap
'---- 25-July-2012     Stan                            elementFailedValidation not initialized - added initialization
'---- 16-Sep-2013     Susan                         Use LabWare function ValidateFieldForTable lots of LIMS basic code
'---- 25-Mar-2014     Stan                           added HL7GetDataType function, removed msgbox(es) in initial error checks
'---- 14-Oct-2014      Susan                          Map template segment to message segment.  Allows HL7 field mapping; Clin Info OBX i.e. fasting, pregnant
'---- 15-Dec-2014      Susan                        For fix validation errors - ubound on tempArray for both columns (not just 1st column)
'---- 11-Feb-2015      Mike Camacho                Implement LabWare 7 error logging
'---- 16-Feb-2017      Susan Epstein          Check for empty value before ArrayFromCSVString (V6 different from LW7)
'---- 19-Apr-2017        Susan                       CHT0018-005 Map repeat elements from msg to template (previously had matched segments only)
'---- 05-Jun-2017        Susan                       CHT0021-003 Repeat Elements - may be mapped individually to variables, table/field; other minor fixes
'---- 06-Jun-2017  		Kathy Brody      		 NLS of messages in code - format based on NLS Template
'---- 25-Jul-2017        Susan                       CHT0024 Initialize all template variables; Better checking on OKToContinue
'---- 24-May-2018        Susan                       CHT0037-011 Do not validate repeat elements if the field is null; "0000" in a date field = NULL
'---- 19-Dec-2019	Susan								T4272SG Create variables  QuoteFixed and QuoteFixedUpper
'---- 08-Jun-2020        Susan                       T5299SG (Bug AX200BH) HL7ExtractPhoneNumber workaround for when both component 1 and other components are populated

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Initialize Variables
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Declare OKToContinue
Declare elementTemplateRepeatsArray[] templateElementsDefaultsArray[]

hasHL7MessageErrors = false
messageErrorsDesc = ""
OKToContinue = true

hasFieldValidationErrors = false
fieldValidationErrorString = NLS("T_CHTTitleFieldValidationErrors", "*Field Validation Errors") + ": "
fieldValidationErrorCounter = 0
status = ClearArray("fieldValidationErrorArray")
status = ClearArray("fieldValidationErrorLocationArray")
status = ClearArray("fieldValidationHeaderArray")
status = ClearArray("repeatElementArray")
status = ClearArray("msgToTemplateMapArray")

fieldValidationHeaderArray[1, 1] = NLS("T_CHTTitleMappedTable", "*Mapped Table")
fieldValidationHeaderArray[1, 2] = NLS("T_CHTTitleMappedField", "*Mapped Field")
fieldValidationHeaderArray[1, 3] = NLS("T_CHTTitleValueInMessage", "*Value in Message")

HTMLLineStart = "<p style = " + qt + " margin-top: 0; margin-bottom: 3px" + qt + "><font face = " + qt + "Arial" + qt + ">"
HTMLLineEnd = "</font></p>"

IF (IsEmpty(displayHL7Message)) THEN
	displayHL7Message = false
ELSE
	tempDisplayIndex = 0
ENDIF

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Initialize Variables for error logging 
'Note: displayError will default to false if omitted from lims log call
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Declare createTrace errorCategory displayError
createTrace = true
displayError = true
errorCategory = "HL7_IN"

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Make sure have an HL7 String
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF (IsEmpty(HL7String)) THEN
	hasHL7MessageErrors = true
	errorLogMsg = NLS("T_CHTErrorHL7StringMissing", "*HL7 string is missing")
	logNumber = CreateLIMSLog(errorLogMsg, , , errorCategory, , , , createTrace)
	OKToContinue = false
ENDIF

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Make sure have an HL7 Template - if have one - determine the repeating segments, repeat elements
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF (OKToContinue) THEN
	IF (IsEmpty(HL7Template)) THEN
		OKToContinue = false
		hasHL7MessageErrors = true
		errorLogMsg = NLS("T_CHTErrorHL7TemplateNameMissing","*HL7 template name is missing")
		logNumber = CreateLIMSLog(errorLogMsg, , , errorCategory, , , , createTrace)
	ELSE
		query = "select t_repeat_segments, t_repeat_elements from hl7_template where name = '" + HL7Template + "' "
		status = SQL(query, "tempArray", , "T", )
		repeatSegments = tempArray[1, 1]
		repeatElements = tempArray[1, 2]
		numRepeatElementsTemplate = ArrayOfSubStrings(repeatElements, ",","repeatElementArray","F")
	ENDIF
ENDIF

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Initialize all variables on the HL7 Template to null.  Not all template segments may be in the msg, so need to make sure variables initialized.
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF (NOT(IsEmpty(HL7Template))) THEN
	status = Subroutine("HL7_TEMPLATE_VARS_CLEAR",  , "F")
ENDIF

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Parse the string
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF (OKToContinue) THEN
	HL7String = Replace(HL7String, chr(11), "")
	HL7String = Replace(HL7String, chr(28), "")
	HL7String = Replace(HL7String, chr(10), chr(13) & chr(10))
	handle = HL7Parse(HL7String)
ENDIF

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Initialize Array for mapping of repeat elements
'Columns are:  Segment, Msg Segment Index, Template Segment Index, Element, Message Field Index, Template Field Index
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
status = ClearArray("elementRepeatMapArray") 
elementRepeatMapCounter = 0

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Get all segments/indexes in the message.  Find matching template index. 
'If there is more than one possible template index, use the one that matches the most default values
'Col 1 is message segment name, Col 2 is message segment index, Col 3 is the Hl7 Template Index
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF (OKToContinue) THEN
	status = ClearArray("msgToTemplateMapArray")
	status = HL7SegmentInfo(handle, "msgToTemplateMapArray")
	numMessageSegments = Ubound(msgToTemplateMapArray, 1)

	iMessageSegment = 0
	WHILE (iMessageSegment < numMessageSegments)

		iMessageSegment = iMessageSegment + 1
		messageSegmentName = msgToTemplateMapArray[iMessageSegment, 1]
		messageSegmentIndex = msgToTemplateMapArray[iMessageSegment, 2]

		'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'Get template definition(s) for this segment
		'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
		query = "select distinct index_number from hl7_template_flds "
		query = query + " where template = '" + HL7Template + "' and segment = '" + messageSegmentName + "' "
		status = SQL(query, "templateThisSegmentIndexArray", , "T", )
		numTemplateIndexesThisSegment = UBound(templateThisSegmentIndexArray, 1)

		matchNumDefaults = -1
		FOR iTemplateIndexThisSegment = 1 to numTemplateIndexesThisSegment
			msgMatchesThisTemplateSegmentIndex = true
			templateIndexThisSegment = templateThisSegmentIndexArray[iTemplateIndexThisSegment, 1]     

			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			'Are there any default values on this template segment defintion, and if so, do they match the message segment
			'exclude elements that repeat (since don't know which repeat to check)
			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			query = "select element_name, component_name, sub_component_name, default_value from hl7_template_flds "
			query = query +  " where template = '{HL7Template}' and segment = '{messageSegmentName}' and index_number = {templateIndexThisSegment} "
			query = query + " and default_value is not null and element_name not in "
			query = query + " (select element_name from hl7_template_flds where  template = '{HL7Template}' and segment = '{messageSegmentName}' and index_number = {templateIndexThisSegment} and field_index > 1) "
			query = ContextTranslateSQL(query) 
			status = SQL(query, "templateDefaultsArray", , "T", )
			numTemplateDefaults = UBound(templateDefaultsArray, 1)

			FOR iTemplateDefault = 1 to numTemplateDefaults            
				elementName = templateDefaultsArray[iTemplateDefault, 1]
				componentName = templateDefaultsArray[iTemplateDefault, 2]
				IF (IsEmpty(componentName)) THEN
					componentName = ""
				ENDIF
				subComponentName = templateDefaultsArray[iTemplateDefault, 3]
				IF (IsEmpty(subComponentName)) THEN
					subComponentName = ""
				ENDIF
				defaultValue =  templateDefaultsArray[iTemplateDefault, 4]

				fieldValue = HL7FieldFromSegment(handle, messageSegmentName, messageSegmentIndex, elementName, componentName,  subComponentName, 1)
				IF ((IsNumeric(defaultValue)) AND (IsNumeric(fieldValue))) THEN
					IF ((Val(defaultValue)) <> (Val(fieldValue))) THEN
						msgMatchesThisTemplateSegmentIndex = false
					ENDIF
				ELSEIF ((str(defaultValue)) <> (str(fieldValue))) THEN
					IF ((NOT(IsDate(defaultValue))) AND (NOT(IsDate(fieldValue)))) THEN
						msgMatchesThisTemplateSegmentIndex = false
					ENDIF
				ENDIF
			NEXT    'default value this segment

			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			'If the segment does not fail on matching, then check how many defaults matched.
			'Keep the template definition with the most matching defaults.
			'Started at -1, so if there are no defaults, there will still be a match.
			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			IF (msgMatchesThisTemplateSegmentIndex) THEN
				IF (numTemplateDefaults > matchNumDefaults) THEN
					matchNumDefaults = numTemplateDefaults
					msgToTemplateMapArray[iMessageSegment, 3] = templateIndexThisSegment
				ENDIF
			ENDIF
		NEXT     'iTemplateSegment   

		'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'Every msg segment should match a template segment
		'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
		templateIndexThisSegment = msgToTemplateMapArray[iMessageSegment, 3]
		IF (IsEmpty(templateIndexThisSegment)) THEN
			OKToContinue = false
			hasHL7MessageErrors = true
			errorLogMsg = ContextTranslate(NLS("T_CHTErrorNoMapMsgToTemplateForSegSegIndex","*Cannot map message segment to template for segment: {messageSegmentName}, Index:{messageSegmentIndex}"))
			logNumber = CreateLIMSLog(errorLogMsg, , , errorCategory, , , , createTrace)
		ENDIF

		IF (OKToContinue) THEN
			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			'Any Repeat ELEMENTS within this segment defined in the template (field index > 1?  (typically separated by ~}
			'If yes, map msg elements to the appropriate template element repeat.  Same rules as for matching segments.
			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			query = "select distinct element_name from hl7_template_flds where  template = '{HL7Template}' and segment = '{messageSegmentName}' and index_number = {templateIndexThisSegment} and field_index > 1"
			query = ContextTranslateSQL(query) 
			status = SQL(query, "elementTemplateRepeatsArray", , "T", )
			numElementWithTemplateRepeats = Ubound(elementTemplateRepeatsArray, 1)			
			FOR iElementWithTemplateRepeat = 1 to numElementWithTemplateRepeats
				elementWithTemplateRepeatName = elementTemplateRepeatsArray[iElementWithTemplateRepeat, 1]

				'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
				'How many template repeats are there for this element?
				'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
				query = "select max(field_index)  from hl7_template_flds where  template = '{HL7Template}' and segment = '{messageSegmentName}' and index_number = {templateIndexThisSegment} "
				query = query + " and element_name = '{elementWithTemplateRepeatName}' "
				query = ContextTranslateSQL(query) 
				status = SQL(query, "tempArray", , "T", )
				numElementTemplateRepeats = tempArray[1, 1]

				'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
				'How many message repeats are there for this element?
				'Verify that the field is not empty
				'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
				numElementMsgRepeats = HL7NumFieldRepeatsInSegment(handle, messageSegmentName, messageSegmentIndex, elementWithTemplateRepeatName,  ,  ) 
				elementRepeatFieldValue = HL7FieldFromSegment(handle, messageSegmentName, messageSegmentIndex, elementWithTemplateRepeatName, , , )
				IF (IsEmpty(elementRepeatFieldValue)) THEN
					numElementMsgRepeats = 0
				ENDIF

				'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
				'For each message repeat of this element, identify the matching template repeat
				'Build array of matches.
				'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
				FOR iElementMsgRepeat = 1 to numElementMsgRepeats
					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					'Populate mapping array with initial identifiers.  Position 6 will hold the mapped field_index from the template
					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					elementRepeatMapCounter = elementRepeatMapCounter + 1			'array counter
					elementRepeatMapArray[elementRepeatMapCounter, 1] = messageSegmentName
					elementRepeatMapArray[elementRepeatMapCounter, 2] = messageSegmentIndex
					elementRepeatMapArray[elementRepeatMapCounter, 3] = templateIndexThisSegment
					elementRepeatMapArray[elementRepeatMapCounter, 4] = elementWithTemplateRepeatName
					elementRepeatMapArray[elementRepeatMapCounter, 5] = iElementMsgRepeat

					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					'Loop through each template element repeat and try to find best match
					'Are there any default values on this template segment defintion, and if so, do they match the message segment
					'exclude elements that repeat (since don't know which repeat to check)
					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					matchNumElementDefaults = -1
					FOR iElementTemplateRepeat = 1 to numElementTemplateRepeats
						query = "select component_name, sub_component_name, default_value from hl7_template_flds "
						query = query +  " where template = '{HL7Template}' and segment = '{messageSegmentName}' and index_number = {templateIndexThisSegment} "
						query = query + " and element_name = '{elementWithTemplateRepeatName}' and field_index = {iElementTemplateRepeat} "
						query = query + " and default_value is not null "
						query = ContextTranslateSQL(query) 
						status = SQL(query, "templateElementsDefaultsArray", , "T", )
						numTemplateElementsDefaults = UBound(templateElementsDefaultsArray, 1)

						msgMatchesThisFieldIndex = true

						FOR iElementTemplateDefault = 1 to numTemplateElementsDefaults         
							componentName = templateElementsDefaultsArray[iElementTemplateDefault, 1]
							IF (IsEmpty(componentName)) THEN
								componentName = ""
							ENDIF
							subComponentName = templateElementsDefaultsArray[iElementTemplateDefault, 2]
							IF (IsEmpty(subComponentName)) THEN
								subComponentName = ""
							ENDIF
							defaultValue =  templateElementsDefaultsArray[iElementTemplateDefault, 3]

							fieldValue = HL7FieldFromSegment(handle, messageSegmentName, messageSegmentIndex, elementWithTemplateRepeatName, componentName,  subComponentName, iElementMsgRepeat)
							IF ((IsNumeric(defaultValue)) AND (IsNumeric(fieldValue))) THEN
								IF ((Val(defaultValue)) <> (Val(fieldValue))) THEN
									msgMatchesThisFieldIndex = false
								ENDIF
							ELSEIF ((str(defaultValue)) <> (str(fieldValue))) THEN
								IF ((NOT(IsDate(defaultValue))) AND (NOT(IsDate(fieldValue)))) THEN
									msgMatchesThisFieldIndex = false
								ENDIF
							ENDIF
						NEXT    'iElementTemplateDefault (default value this segment, element, component, subcomp)

						'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
						'If the element does not fail on matching, then check how many defaults matched.
						'Keep the template definition with the most matching defaults.
						'Started at -1, so if there are no defaults, there will still be a match.
						'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
						IF (msgMatchesThisFieldIndex) THEN
							IF (numTemplateElementsDefaults > matchNumElementDefaults) THEN
								matchNumElementDefaults = numTemplateElementsDefaults
								elementRepeatMapArray[elementRepeatMapCounter, 6] = iElementTemplateRepeat
							ENDIF
						ENDIF
					NEXT     'iElementTemplateRepeat   (looping through all template repeats to see which one best matches the msg)

					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					'Every msg repeat element should match a template repeat element
					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					elementIndexThisField = elementRepeatMapArray[elementRepeatMapCounter, 6]
					IF (IsEmpty(elementIndexThisField)) THEN
						OKToContinue = false
						hasHL7MessageErrors = true
						errorLogMsg = ContextTranslate(NLS("T_CHTErrorNoMapElementToTempForSegSegIndexElement", "*Cannot map repeat element to template for segment: {messageSegmentName}, Index: {messageSegmentIndex}, Element: {elementWithTemplateRepeatName}, Index: {iElementMsgRepeat} "))
						errorLogMsg = ContextTranslate(errorLogMsg) 
						logNumber = CreateLIMSLog(errorLogMsg, , , errorCategory, , , , createTrace)
					ENDIF

				NEXT	'iElementMsgRepeat (repeats in the message for this element  - element has template repeats defined)
			NEXT 	'iElementWithTemplateRepeat  (elements in this segment that have repeats)
			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			'End of Repeat Element section
			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
		ENDIF 	'OK To Continue

		'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'Apply message mapping
		'OBX special case since difficult to map on OBX 5 (variable datatype)
		'If OBX.5 is CE or CWE, and have obx.5.1, then use that.  Otherwise, use obx.5.4
		'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
		IF (OKToContinue) THEN
			IF (messageSegmentName = "OBX") THEN
				obxDataType = ""
				obxDataType = HL7FieldFromSegment(handle, messageSegmentName, messageSegmentIndex, "Value Type",  ,   , 1)
				IF ((obxDataType = "CE") OR (obxDataType = "CWE")) THEN
					obxObservationValue  = ""
					obxObservationValue = HL7FieldFromSegment(handle, messageSegmentName, messageSegmentIndex, "Observation Value",  ,   , 1)
					IF (NOT(IsEmpty(obxObservationValue))) THEN
						status = ArrayFromCSVString(obxObservationValue, "^" , ,  , "tempArray")
						obx5Position1 = tempArray[1]
						obx5Position4 = tempArray[4]
						IF (NOT(IsEmpty(obx5Position1))) THEN
							status = HL7SetField(handle, messageSegmentName, messageSegmentIndex, "Observation Value", obx5Position1,  ,  , 1)
						ELSEIF (NOT(IsEmpty(obx5Position4))) THEN
							status = HL7SetField(handle, messageSegmentName, messageSegmentIndex, "Observation Value", obx5Position4,  ,  , 1)
						ENDIF
					ENDIF	'observationValue not empty
				ENDIF    'obx 5 is CE or CWE
			ENDIF    'message segment is OBX

			status = HL7MapFields(handle, HL7Template, messageSegmentName, messageSegmentIndex, templateIndexThisSegment)
		ENDIF 	'OKToContinue

	WEND      'iMessageSegment
ENDIF    'OKToContinue

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'For all template Segments, find linked msg segments - loop through and check for errors, populate variables
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF (OKToContinue) THEN

	status = ClearArray("tempArrayPopulateArray")
	iTempArrayPopulate = 0

	iMessageSegment = 0
	WHILE (iMessageSegment < numMessageSegments)

		iMessageSegment = iMessageSegment + 1
		messageSegmentName = msgToTemplateMapArray[iMessageSegment, 1]
		messageSegmentIndex = msgToTemplateMapArray[iMessageSegment, 2]
		templateSegmentIndex = msgToTemplateMapArray[iMessageSegment, 3]

		segmentNameDotIndex = messageSegmentName + "." + str(templateSegmentIndex)
		IF (Instr(repeatSegments,segmentNameDotIndex) > 0) THEN
			isRepeatingSegment = true
		ELSE
			isRepeatingSegment = false
		ENDIF

		'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'Get Template Fields information
		'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
		query = "select tf.element_name, tf.component_name, tf.sub_component_name, tf.variable_name,"
		query = query + " tf.mapped_table, tf.mapped_field, de.chapter, de.dt, tf.field_index from hl7_template_flds tf, hl7_data_elements de"
		query = query + " where tf.template = '{HL7Template}' and tf.segment = '{messageSegmentName}' "
		query = query + " and index_number = {templateSegmentIndex} "
		query = query + " and tf.segment = de.seg "
		query = query + " and tf.element_name = de.element_name "
		query = query + " order by order_number "
		query = ContextTranslateSQL(query) 

		status = sql(query, "templateFieldsArray", , "T", )
		numTemplateFields = UBound(templateFieldsArray, 1)

		FOR iField = 1 to numTemplateFields
			elementName = templateFieldsArray[iField, 1]
			componentName = templateFieldsArray[iField, 2]
			IF (IsEmpty(componentName)) THEN
				componentName = ""
			ENDIF
			subComponentName = templateFieldsArray[iField, 3]
			IF (IsEmpty(subComponentName)) THEN
				subComponentName = ""
			ENDIF
			variableName =  templateFieldsArray[iField, 4]
			mappedTable =  templateFieldsArray[iField, 5]
			mappedField =  templateFieldsArray[iField, 6]
			chapter =  templateFieldsArray[iField, 7]
			templateElementFieldIndex =  templateFieldsArray[iField, 9]

			dataTypeIndex = ExtractNumber(str(templateSegmentIndex), "T")
			dataTypeField = HL7GetDataType(messageSegmentName, elementName, componentName, subComponentName, handle, messageSegmentIndex)

			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			'OBX.5 Field data type is on OBX.2
			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			IF ((messageSegmentName = "OBX") AND (elementName = "Observation Value")) THEN
				dataTypeField = HL7FieldFromSegment(handle, messageSegmentName, messageSegmentIndex, "Value Type",  ,   , 1)
			ENDIF

			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			'Defined as Repeat Element? (Use Array to ensure exact match vs instring which might not be sure)
			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			isRepeatingElement = false
			numRepeatElements = 1
			mapVariableRepeatElementAsArray = true

			IF (numRepeatElementsTemplate > 0) THEN
				status = ArrayFilter(repeatElementArray,  ,  , chapter, "matchArray")
				numMatch = Ubound(matchArray)
				IF (numMatch > 0) THEN
					isRepeatingElement = true
					numRepeatElements = HL7NumFieldRepeatsInSegment(handle, messageSegmentName, messageSegmentIndex, elementName,  , )
					status = ClearArray("componentValuesArray")
				ENDIF
			ENDIF

			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			'Are there repeat elements for this field that are defined as field repeats in the template (field index > 1)
			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			hasRepeatElementMatchingConditions = false			
			status = ClearArray("arraySearchColumnsArray")
			status = ClearArray("arraySearchValuesArray")
			arraySearchColumnsArray[1] = 1
			arraySearchColumnsArray[2] = 2
			arraySearchColumnsArray[3] = 4

			arraySearchValuesArray[1] = messageSegmentName
			arraySearchValuesArray[2] = messageSegmentIndex
			arraySearchValuesArray[3] = elementName

			status = ArraySearchRows(elementRepeatMapArray, "tempArray", arraySearchColumnsArray, arraySearchValuesArray) 
			numRepeatElementMsgMatch = Ubound(tempArray, 1)
			IF (numRepeatElementMsgMatch > 0) THEN
				hasRepeatElementMatchingConditions = true
				numRepeatElements = numRepeatElementMsgMatch

				'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
				'Do multiple message elements map to the same template element? 
				'If yes, variable output  will need to be an array.  If 1:1,then output will be a single value variable
				'Note:  elementRepeatMapArray is created such that all repeat elements for a segment/index/element are in contigous rows
				'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
				minRowIndex = tempArray[1]
				status = ArraySubset(elementRepeatMapArray, "tempArray", minRowIndex, numRepeatElements, 6, 1)
				numDistinctElementTemplate = ArrayDistinctValues(tempArray, "distinctElementMatchArray")
				IF (numRepeatElements = numDistinctElementTemplate) THEN
					mapVariableRepeatElementAsArray = false
				ENDIF        'template element repeats each map to only one msg element repeat
			ENDIF 

			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			'Loop through each repeat element in the msg to find the element(s) matching this template element
			'Vast majority of the time the element will not repeat
			'If it does repeat - in some cases there will only be one template defintion (hasRepeatElementMatchingConditions = false)
			'Other cases, will have repeat element definitions in the template to match to the repeat elements in the msg (hasRepeatElementMatchingConditions = true)
			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			elementCounter = 1
			fieldValue = ""
			WHILE (elementCounter <= numRepeatElements)
				'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
				'Is this a repeat element with multiple template definitions that have been mapped?
				'If so, only continue if the msg element is mapped to this template element (otherwise skip to next WHILE until find the matching element)
				'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
				elementMsgMatchesTemplate = true
				IF (hasRepeatElementMatchingConditions) THEN
					arraySearchColumnsArray[4] = 5
					arraySearchValuesArray[4] = elementCounter
					status = ArraySearchRows(elementRepeatMapArray, "tempArray", arraySearchColumnsArray, arraySearchValuesArray) 
					matchRowIndex = tempArray[1]
					templateFieldIndexForThisRepeatMsgElement = elementRepeatMapArray[matchRowIndex, 6]
					IF (templateFieldIndexForThisRepeatMsgElement <> templateElementFieldIndex) THEN
						elementMsgMatchesTemplate = false 
					ENDIF 
				ENDIF

				OKToContinueElement = true
				IF (NOT(elementMsgMatchesTemplate)) THEN
					OKToContinueElement = false
				ENDIF 

				IF (OKToContinueElement) THEN
					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					'Get field value
					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					fieldValue = ""
					fieldValue = HL7FieldFromSegment(handle, messageSegmentName, messageSegmentIndex, elementName, componentName,  subComponentName, elementCounter)
					elementFailedValidation = false
					IF ((fieldValue = ERROR) OR (fieldValue = EMPTY)) THEN
						fieldValue = ""
					ELSEIF (NOT(IsDate(fieldValue))) THEN
						fieldValue = Trim(fieldValue)
					ENDIF

					IF (NOT(IsEmpty(fieldValue))) THEN
						IF ((dataTypeField = "XTN") AND (Instr(fieldValue, "^") > 0)) THEN
							'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
							'Phone Numbers - put into a single field
							'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
							'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
							'Workaround for bug AP934CJ.  HL7ExtractPhoneNumber does not work if Telecom Use Code is null (position 2)
							'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
							Declare tempPhoneArray
							status = ArrayFromCSVString(fieldValue, "^",  , "T", "tempPhoneArray")
							telecomUseCode = tempPhoneArray[2]
							IF (IsEmpty(telecomUseCode)) THEN
								tempPhoneArray[2] = "X"
								fieldValue = ArrayToCSVString(tempPhoneArray, "^")
							ENDIF
							'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
							'End of workaround for bug AP934CJ.
							'-------------------------------------------------------------------------------------------------------------------------------------------------------------------

							'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
							'Workaround for bug AX200BH HL7ExtractPhoneNumber does not work if component 1 is populated
							'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
							phoneNumberPos1 = tempPhoneArray[1]
							phoneNumberPos7 = tempPhoneArray[7]
							IF ((NotEmpty(phoneNumberPos1)) AND (NotEmpty(phoneNumberPos7))) THEN
								tempPhoneArray[1] = ""
								fieldValue = ArrayToCSVString(tempPhoneArray, "^")
							ENDIF
							'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
							'End of workaround for bug AX200BH.
							'-------------------------------------------------------------------------------------------------------------------------------------------------------------------

							phoneNumber = HL7ExtractPhoneNumber(fieldValue, "^")
							IF (phoneNumber = ERROR) THEN
								elementFailedValidation = true
								linkTable = ""
								linkListKey = ""
							ELSE
								fieldValue = phoneNumber
							ENDIF

						ELSEIF ((dataTypeField = "XPN") OR (dataTypeField = "CNN") OR (dataTypeField = "PPN") OR (dataTypeField = "XCN"))   THEN
							'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
							'Person Full Name - combine first name, middle name, last name, prefix, suffix
							'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
							status = Subroutine("HL7_FULLNAME_FROM_FIELD",  , "F")

						ELSEIF ((NOT(IsDate(fieldValue))) AND ((dataTypeField = "DT") OR (dataTypeField = "DR") OR (dataTypeField = "TS"))) THEN
							'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
							'Convert Dates from YYYYMMDDHHMMSS
							'20-Jun-2008 TS fields seem to be automatically converted to DateTime, but not DT, DR fields
							'Validation error on date
							'24-May-2018  "0000" in a date field = NULL
							'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
							IF (fieldValue = "0000") THEN
								fieldValue = ""
							ELSE
								dateYMDHMSString = fieldValue
								IF (Right(dateYMDHMSString,6) = "000000") THEN
									dateYMDHMSString = Left(dateYMDHMSString, 8)
								ENDIF
								GoSub DATE_FROM_YMDHMS
								IF (outputDate = ERROR) THEN
									elementFailedValidation = true
									linkTable = ""
									linkListKey = ""
								ELSE
									fieldValue = outputDate
								ENDIF
							ENDIF

						ELSEIF ((messageSegmentName = "OBX") AND (elementName = "Observation Value")) THEN
							'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
							'OBX.5 Use singular value from position 1 if there are multiple components.
							'This will not be totally correct for all cases.  Will need more robust solution in future.
							'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
							status = ArrayFromCSVString(fieldValue, "^" , ,  , "tempArray")
							numOBXComponents = Ubound(tempArray)
							IF (numOBXComponents > 1) THEN
								obx5Position1 = tempArray[1]
								IF (NOT(IsEmpty(obx5Position1))) THEN
									fieldValue = obx5Position1
									status = HL7SetField(handle, messageSegmentName, messageSegmentIndex, "Observation Value", obx5Position1,  ,  , 1)
								ENDIF
							ENDIF
						ENDIF            'Special field handling, ie. DT, TR, TS, XTN, OBX (not single value)
					ENDIF    'fieldValue is not empty

					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					'Validate against LIMS Table Master/Field Master
					'Note that this check cannot be in the above field value not empty - since if the field is from a component
					'the field value changes within the IF structure - and may now be empty
					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					IF (NOT(IsEmpty(fieldValue)) and (NOT(elementFailedValidation))) THEN

						IF ((NotEmpty(mappedTable)) AND (NotEmpty(mappedField))) THEN
							linkTable = ""
							linkListKey = ""
							query = "select link_table, list_key from field_master "
							query = query + " where table_name = '" + mappedTable + "' "
							query = query + " and field_name = '" + mappedField + "' "
							status = SQL(query, "tempArray",  , "F", )
							numArray = Ubound(tempArray)
							IF (numArray > 0) THEN
								linkTable = tempArray[1, 1]
								linkListKey = tempArray[1, 2]
								'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
								'If the linkTable is Zipcode - only keep the left 5 characters if the first character is numeric
								'Always remove spaces from the zipcode (applies more to Canadian Postal Codes)
								'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
								IF (linkTable = "T_ZIPCODE") THEN
									fieldValue = Replace(fieldValue, " ", "")
									IF (IsNumeric(Left(fieldValue, 1))) THEN
										fieldValue = Left(fieldValue, 5)
									ENDIF
								ENDIF
							ENDIF    

							'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
							'Validate the field value
							'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
							validateStatus = ValidateFieldForTable(mappedTable, mappedField, fieldValue)
							IF (NOT(validateStatus)) THEN
								elementFailedValidation = true
							ENDIF    'field fails validation
						ENDIF        'have a mapped table/field
					ENDIF    'fieldValue is not empty

					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					'If there are field validation errors, build the array to allow the user to correct these
					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					IF (elementFailedValidation) THEN
						elementFailedValidation = false
						hasFieldValidationErrors = true
						fieldValidationErrorCounter = fieldValidationErrorCounter + 1
						fieldValidationErrorArray[fieldValidationErrorCounter, 1] = mappedTable
						fieldValidationErrorArray[fieldValidationErrorCounter, 2] = mappedField
						fieldValidationErrorArray[fieldValidationErrorCounter, 3] = fieldValue
						fieldValidationErrorString = fieldValidationErrorString + " " + mappedTable + "." + mappedField + " (" + fieldValue + ")"
						fieldValidationErrorLocationArray[fieldValidationErrorCounter, 1] = messageSegmentName
						fieldValidationErrorLocationArray[fieldValidationErrorCounter, 2] = messageSegmentIndex
						fieldValidationErrorLocationArray[fieldValidationErrorCounter, 3] = elementName
						fieldValidationErrorLocationArray[fieldValidationErrorCounter, 4] = componentName
						fieldValidationErrorLocationArray[fieldValidationErrorCounter, 5] = subComponentName
						fieldValidationErrorLocationArray[fieldValidationErrorCounter, 6] = elementCounter
						fieldValidationErrorLocationArray[fieldValidationErrorCounter, 7] = fieldValue
						fieldValidationErrorLocationArray[fieldValidationErrorCounter, 8] = linkTable
						fieldValidationErrorLocationArray[fieldValidationErrorCounter, 9] = linkListKey
						fieldValidationErrorLocationArray[fieldValidationErrorCounter, 10] = mappedTable
						fieldValidationErrorLocationArray[fieldValidationErrorCounter, 11] = mappedField
					ENDIF

					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					'For repeats within an element - populate the array of fieldValues
					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					IF ((isRepeatingElement) AND (mapVariableRepeatElementAsArray)) THEN
						IF (NOT(IsEmpty(fieldValue))) THEN
							componentValuesArray[elementCounter] = fieldValue
						ELSE
							componentValuesArray[elementCounter] = ""
						ENDIF
					ENDIF

				ENDIF    'OK to continue element
				elementCounter = elementCounter + 1
			WEND

			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			'Populate the Variable
			'For repeating segments, store the values in a temporary array (since can't put into an array with a name defined in a variable)
			'For repeating elements, the value is an array of the repeats
			'Need to set values to empty, otherwise variable is undefined and causes problems later
			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			newSingleVariable = false
			IF (NOT(IsEmpty(variableName))) THEN
				IF ((NOT(isRepeatingSegment)) AND (NOT(isRepeatingElement))) THEN
					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					'Not a repeating segment and not a repeating element
					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					status =  SetVariable(variableName, "")
					IF (NOT(IsEmpty(fieldValue))) THEN
						status =  SetVariable(variableName, fieldValue)
						newSingleVariable = true
					ENDIF

				ELSEIF ((NOT(isRepeatingSegment)) AND (isRepeatingElement)) THEN
					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					'Not a repeating segment but IS a repeating element, may or may not be an array depending on msg to template element maps (single vs multiple)
					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					status =  SetVariable(variableName, "")

					IF ((NOT(mapVariableRepeatElementAsArray)) AND (NOT(IsEmpty(fieldValue)))) THEN
						status =  SetVariable(variableName, fieldValue)
						newSingleVariable = true
					ELSEIF ((mapVariableRepeatElementAsArray) AND (Ubound(componentValuesArray) > 0)) THEN
						status =  SetVariable(variableName, componentValuesArray)
					ENDIF

				ELSEIF ((isRepeatingSegment) AND (NOT(isRepeatingElement))) THEN
					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					'IS a repeating segment but IS NOT a repeating element
					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					iTempArrayPopulate = iTempArrayPopulate + 1
					tempArrayPopulateArray[iTempArrayPopulate, 1] = variableName
					tempArrayPopulateArray[iTempArrayPopulate, 2] = ""

					IF (NOT(IsEmpty(fieldValue))) THEN
						tempArrayPopulateArray[iTempArrayPopulate, 2] = fieldValue
					ENDIF

				ELSEIF ((isRepeatingSegment) AND (isRepeatingElement)) THEN
					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					'IS a repeating segment and IS a repeating element
					'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
					iTempArrayPopulate = iTempArrayPopulate + 1
					tempArrayPopulateArray[iTempArrayPopulate, 1] = variableName
					tempArrayPopulateArray[iTempArrayPopulate, 2] = ""

					IF ((NOT(mapVariableRepeatElementAsArray)) AND (NOT(IsEmpty(fieldValue)))) THEN
						tempArrayPopulateArray[iTempArrayPopulate, 2] = fieldValue
					ELSEIF ((mapVariableRepeatElementAsArray) AND (Ubound(componentValuesArray) > 0)) THEN
						tempArrayPopulateArray[iTempArrayPopulate, 2] = componentValuesArray
					ENDIF

				ENDIF    'check on repeat segments and elements

				'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
				'For single variables, set variableNameQuoteFixed and variableNameQuoteFixedUpper
				'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
				IF (newSingleVariable) THEN
					variableNameQuoteFixed = variableName + "QuoteFixed"
					fieldValueQuoteFixed = StringReplace(fieldValue, "'", "''")
					status =  SetVariable(variableNameQuoteFixed, fieldValueQuoteFixed)

					variableNameQuoteFixedUpper = variableName + "QuoteFixedUpper"
					fieldValueQuoteFixedUpper = Ucase(StringReplace(fieldValue, "'", "''"))
					status =  SetVariable(variableNameQuoteFixedUpper, fieldValueQuoteFixedUpper)					
				ENDIF
			ENDIF    'have variableName

			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			'Populate Display Array if displayHL7Message is true - used by calling sub UTILITY_HL7_DISPLAY
			'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
			IF (displayHL7Message) THEN
				componentDisplayName = componentName
				IF (NOT(IsEmpty(subComponentName))) THEN
					componentDisplayName = componentDisplayName + " / " + subComponentName
				ENDIF

				displayIndex = displayIndex + 1
				displayArray[displayIndex, 1] = messageSegmentName
				displayArray[displayIndex, 2] = messageSegmentIndex
				displayArray[displayIndex, 3] = templateSegmentIndex
				displayArray[displayIndex, 4] = elementName
				displayArray[displayIndex, 5] = componentDisplayName
				displayArray[displayIndex, 6] = mappedTable
				displayArray[displayIndex, 7] = mappedField
				displayArray[displayIndex, 8] = variableName
				displayArray[displayIndex, 9] = fieldValue
				IF ((isRepeatingElement) AND (mapVariableRepeatElementAsArray)) THEN
					displayArray[displayIndex, 9] = HTMLLineStart + ArrayToCSVString(componentValuesArray, HTMLLineEnd & HTMLLineStart) + HTMLLineEnd
				ENDIF

			ENDIF        'displayHL7Message
		NEXT       'template field
	WEND        'segment

	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	'Move values from temporary array to all the arrays defined in the HL7 Template for repeating segments
	'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	status = ArrayConvertToSingleDim(tempArrayPopulateArray, "arrayTempNamesArray", 1)
	numArrays = ArrayDistinctValues(arrayTempNamesArray, "arrayNamesArray")

	status = ClearArray("arraySearchColumnsArray")
	status = ClearArray("arraySearchValuesArray")
	arraySearchColumnsArray[1] = 1

	FOR iArray = 1 to numArrays
		arrayName = arrayNamesArray[iArray]
		arraySearchValuesArray[1] = arrayName
		status = ArraySearchRows(tempArrayPopulateArray, "rowMatchArray", arraySearchColumnsArray, arraySearchValuesArray)
		numMatches = Ubound(rowMatchArray)

		status = ClearArray("tempArray")
		FOR iMatch = 1 to numMatches
			rowIndex = rowMatchArray[iMatch]
			newValueForArray = tempArrayPopulateArray[rowIndex, 2]
			tempArray[iMatch] = newValueForArray
		NEXT

		tempString = ArrayToCSVString(tempArray, "^")
		status = ArrayFromCSVString(tempString, "^",  , "T", arrayName)
	NEXT

ENDIF    'OKToContinue

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Cleanup
'Purge the message from memory
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
status = HL7DiscardMessage(handle)

status = ClearArray("repeatElementArray")
status = ClearArray("templateThisSegmentIndexArray")
status = ClearArray("templateDefaultsArray")
status = ClearArray("segmentsArray")
status = ClearArray("arraySearchColumnsArray")
status = ClearArray("arraySearchValuesArray")
status = ClearArray("segmentIndexMatchArray")
status = ClearArray("templateFieldsArray")
status = ClearArray("tempArrayPopulateArray")
status = ClearArray("rowMatchArray")

return
====== Subroutine HL7_PARSE_MSG Ends here ===
====== Subroutine HL7_FULLNAME_FROM_FIELD Starts here ===
'----       Subroutine:   HL7_FULLNAME_FROM_FIELD
'----       Function:   HL7 Concatenate parts of person name to create a full name
'----            i.e. fieldValue = "111111111^Bloodraw^Leonard^T^JR^DR^^^NPI&2.16.840.1.113883.4.6&ISO^L^^^NPI^NPI_Facility&2.16.840.1.113883.3.72.5.26&ISO^^^^^^^MD"
'----
'----       INPUTS:
'----            Context:
'----
'----            Variables (incl global)
'----                 fieldValue
'----                dataTypeField
'----
'----       OUTPUTS:
'----            Context:
'----                None
'----            Variables (incl global)
'----                fieldValue 
'----
'----    Caveats:
'----                If calling this routine, should be called POSTED, so that variable names do not interfere with calling routine
'----
'----    Revisions:
'----
'---- Date                   Author                              Details
'---- 1-Jun-2017    Susan Epstein         Initial configuration

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Initialize variables
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Declare firstName fullName lastName middleName  namePrefix namePrefixDescription nameSuffix nameSuffixDescription 

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Check for missing inputs
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
IF ((IsEmpty(fieldValue)) OR (IsEmpty(dataTypeField))) THEN
    return
ENDIF

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'CNN, PPN, XCN fields have first, middle, last, prefix, suffix in same positions in field
'XPN starts in different position.  Add extra component ^ so all fields can be parsed the same
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
SELECTCASE dataTypeField
CASE "XPN"
    fieldValue = "^" + fieldValue
CASE "CNN", "PPN", "XCN"
    'do nothing
CASE ELSE
    'do nothing
ENDSELECT

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Get pieces of full name from field
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
status = ArrayFromCSVString(fieldValue, "^" , ,  , "namePiecesArray")
lastName = namePiecesArray[2]
firstName = namePiecesArray[3]
middleName = namePiecesArray[4]
nameSuffix = namePiecesArray[5]
namePrefix = namePiecesArray[6]

IF (Len(middleName) = 1) THEN
    middleName = middleName + "."
ENDIF

namePrefixDescription = ""
IF (NOT(IsEmpty(namePrefix))) THEN
    namePrefixDescription = ListEntryDescription("NM_PREFIX",namePrefix)
ENDIF

nameSuffixDescription = ""
IF (NOT(IsEmpty(nameSuffix))) THEN
    nameSuffixDescription = ListEntryDescription("NM_SUFFIX",nameSuffix)
ENDIF

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Build full name (cleanup spaces)
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
fullName = namePrefixDescription + " " + firstName + " " + middleName + " " + lastName + " " + nameSuffixDescription
fullName = StringReplace(fullName, "EMPTY", " ") 
fullName = Trim(fullName)

WHILE (Instr(fullName,"  ") > 0)
    fullName = StringReplace(fullName, "  ", " ") 
WEND
IF ((NOT(IsEmpty(fullName))) AND (fullName <> ERROR)) THEN
    fieldValue = fullName
ENDIF

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Cleanup 
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------


return

====== Subroutine HL7_FULLNAME_FROM_FIELD Ends here ===
====== Subroutine HL7_TEMPLATE_VARS_CLEAR Starts here ===
'----       Subroutine:  HL7_TEMPLATE_VARS_CLEAR
'----       Function:  Clear Variables populated for an HL7 Template
'----
'----       INPUTS:
'----            Context:
'----
'----            Variables (incl global)
'----              HL7Template
'----
'----       OUTPUTS:
'----            Context:
'----                None
'----            Variables (incl global)
'----                None
'----
'----    Caveats:
'----
'----    Revisions:
'----
'---- Date                   Author                              Details
'---- 16-Dec-2014    Susan Goodhart           Initial configuration
'---- 10-Aug-2017    Susan Epstein               CHT0025 LW7 Update.  Identification of what is an array vs variable changed.
'---- 13-Nov-2017    Susan		                        CHT0031  ClearArray(varName) not in double quotes
'---- 19-Dec-2019	Susan								T4272SG Clear Variables that are QuoteFixed,QuoteFixedUpper

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Initialize Variables
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Declare templateFieldsArray[] repeatElementArray[] matchArray[] tempArray[]
Declare varName newVariableName 

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Get Template Fields variables
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
query = ContextTranslateSQL( "select t_repeat_segments, t_repeat_elements from hl7_template where name = '{HL7Template}' ")
status = SQL(query, "tempArray", , "T", )
repeatSegments = tempArray[1, 1]
repeatElements = tempArray[1, 2]
numRepeatElementsTemplate = ArrayOfSubStrings(repeatElements, ",","repeatElementArray","F")

query = "select hl7_template_flds.variable_name, hl7_template_flds.segment, hl7_template_flds.index_number, "
query = query + " hl7_data_elements.chapter "
query = query + " from hl7_template_flds, hl7_data_elements "
query = query + " where hl7_template_flds.template = '{HL7Template}' "
query = query + " and hl7_data_elements.element_name = hl7_template_flds.element_name "
query = query + " and hl7_data_elements.seg = hl7_template_flds.segment "
query = query + " and hl7_template_flds.variable_name is not null "
query = query + " order by order_number "
query = ContextTranslateSQL(query) 
status = SQL(query, "templateFieldsArray",  , "F")
numTemplateFieldsVariables = Ubound(templateFieldsArray, 1)

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Clear all variables
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
FOR iVar = 1 to numTemplateFieldsVariables
	varName = templateFieldsArray[iVar, 1]
	segmentName = templateFieldsArray[iVar, 2]
	segmentIndex = templateFieldsArray[iVar, 3]
	chapter = templateFieldsArray[iVar, 4]

	status = IsVariableDefined(varName)
	IF (status) THEN
		'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'If the variable is in a repeating segment or element, then it is an array.  Otherwise, a simple variable.
		'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
		segmentNameDotIndex = ContextTranslate("{segmentName}.{segmentIndex}")
		isRepeatingSegment = false
		IF (Instr(repeatSegments,segmentNameDotIndex) > 0) THEN
			isRepeatingSegment = true
		ENDIF

		isRepeatingElement = false
		IF (numRepeatElementsTemplate > 0) THEN
			status = ArrayFilter(repeatElementArray,  ,  , chapter, "matchArray")
			numMatch = Ubound(matchArray)
			IF (numMatch > 0) THEN
				isRepeatingElement = true
			ENDIF
		ENDIF

		'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'Perform the clear of the array or variable
		'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
		lasterror = ""
		IF ((isRepeatingSegment) OR (isRepeatingElement)) THEN
			status = ClearArray(varName) 
		ELSE
			IF (IsVariableDefined(varName)) THEN
				status =  SetVariable(varName, "")
			ENDIF
			newVariableName = varName + "QuoteFixed"
			IF (IsVariableDefined(newVariableName)) THEN
				status =  SetVariable(newVariableName, "")
			ENDIF
			newVariableName = varName + "QuoteFixedUpper"
			IF (IsVariableDefined(newVariableName)) THEN
				status =  SetVariable(newVariableName, "")
			ENDIF
		ENDIF
	ENDIF
NEXT 

'-------------------------------------------------------------------------------------------------------------------------------------------------------------------
'Cleanup
'-------------------------------------------------------------------------------------------------------------------------------------------------------------------

return
====== Subroutine HL7_TEMPLATE_VARS_CLEAR Ends here ===

